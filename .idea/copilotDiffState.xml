<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="updatedContent" value="# Build files&#10;build/&#10;.gradle/&#10;gradle-app.setting&#10;!gradle-wrapper.jar&#10;&#10;# IDE files&#10;.idea/&#10;*.iml&#10;*.ipr&#10;*.iws&#10;&#10;# OS files&#10;.DS_Store&#10;Thumbs.db&#10;&#10;# Logs&#10;*.log&#10;&#10;# Temporary files&#10;*.tmp&#10;*.temp" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/demo/controller/ClientController.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/demo/controller/ClientController.kt" />
              <option name="originalContent" value="package com.example.demo.controller&#10;&#10;import com.example.demo.service.ClientService&#10;import com.example.demo.model.Client&#10;import com.example.demo.dto.ClientDTO&#10;import com.example.demo.dto.AccountDTO&#10;import com.example.demo.dto.LoginRequest&#10;import org.springframework.http.ResponseEntity&#10;import org.springframework.web.bind.annotation.*&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api&quot;)&#10;class ClientController(private val clientService: ClientService) {&#10;&#10;    @PostMapping(&quot;/clients&quot;)&#10;    fun createClient(@RequestBody client: Client): ResponseEntity&lt;ClientDTO&gt; {&#10;        val savedClient = clientService.createClient(client)&#10;        val account = savedClient.account?.let {&#10;            AccountDTO(it.id, it.accountNumber, it.balance)&#10;        }&#10;        val clientDTO = ClientDTO(&#10;            savedClient.id,&#10;            savedClient.name,&#10;            savedClient.email,&#10;            savedClient.cpf,&#10;            savedClient.birthDate?.toString(),&#10;            savedClient.address,&#10;            savedClient.phone,&#10;            savedClient.isActive,&#10;            account&#10;        )&#10;        return ResponseEntity.ok(clientDTO)&#10;    }&#10;&#10;    @GetMapping(&quot;/clients&quot;)&#10;    fun getAllClients(): ResponseEntity&lt;List&lt;ClientDTO&gt;&gt; {&#10;        val clients = clientService.getAllClients()&#10;        val clientDTOs = clients.map { client -&gt;&#10;            val account = client.account?.let {&#10;                AccountDTO(it.id, it.accountNumber, it.balance)&#10;            }&#10;            ClientDTO(&#10;                client.id,&#10;                client.name,&#10;                client.email,&#10;                client.cpf,&#10;                client.birthDate?.toString(),&#10;                client.address,&#10;                client.phone,&#10;                client.isActive,&#10;                account&#10;            )&#10;        }&#10;        return ResponseEntity.ok(clientDTOs)&#10;    }&#10;&#10;    @GetMapping(&quot;/clients/{id}&quot;)&#10;    fun getClientById(@PathVariable id: Long): ResponseEntity&lt;ClientDTO&gt; {&#10;        val client = clientService.getClientById(id)&#10;        return if (client != null) {&#10;            val account = client.account?.let {&#10;                AccountDTO(it.id, it.accountNumber, it.balance)&#10;            }&#10;            val clientDTO = ClientDTO(&#10;                client.id,&#10;                client.name,&#10;                client.email,&#10;                client.cpf,&#10;                client.birthDate?.toString(),&#10;                client.address,&#10;                client.phone,&#10;                client.isActive,&#10;                account&#10;            )&#10;            ResponseEntity.ok(clientDTO)&#10;        } else {&#10;            ResponseEntity.notFound().build()&#10;        }&#10;    }&#10;&#10;    @PutMapping(&quot;/clients/{id}&quot;)&#10;    fun updateClient(@PathVariable id: Long, @RequestBody client: Client): ResponseEntity&lt;Client&gt; {&#10;        val updatedClient = clientService.updateClient(id, client)&#10;        return if (updatedClient != null) {&#10;            ResponseEntity.ok(updatedClient)&#10;        } else {&#10;            ResponseEntity.notFound().build()&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;/clients/{id}&quot;)&#10;    fun deleteClient(@PathVariable id: Long): ResponseEntity&lt;Void&gt; {&#10;        return try {&#10;            clientService.deleteClient(id)&#10;            ResponseEntity.noContent().build()&#10;        } catch (e: IllegalArgumentException) {&#10;            ResponseEntity.notFound().build()&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/login&quot;)&#10;    fun login(@RequestBody loginRequest: LoginRequest): ResponseEntity&lt;ClientDTO&gt; {&#10;        val client = clientService.login(loginRequest.email, loginRequest.password)&#10;        val account = client.account?.let {&#10;            AccountDTO(it.id, it.accountNumber, it.balance)&#10;        }&#10;        val clientDTO = ClientDTO(&#10;            client.id,&#10;            client.name,&#10;            client.email,&#10;            client.cpf,&#10;            client.birthDate?.toString(),&#10;            client.address,&#10;            client.phone,&#10;            client.isActive,&#10;            account&#10;        )&#10;        return ResponseEntity.ok(clientDTO)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.demo.controller&#10;&#10;import com.example.demo.service.ClientService&#10;import com.example.demo.model.Client&#10;import com.example.demo.dto.ClientDTO&#10;import com.example.demo.dto.AccountDTO&#10;import com.example.demo.dto.LoginRequest&#10;import org.springframework.http.ResponseEntity&#10;import org.springframework.web.bind.annotation.*&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api&quot;)&#10;class ClientController(private val clientService: ClientService) {&#10;&#10;    @PostMapping(&quot;/clients&quot;)&#10;    fun createClient(@RequestBody client: Client): ResponseEntity&lt;Any&gt; {&#10;        return try {&#10;            val savedClient = clientService.createClient(client)&#10;            val account = savedClient.account?.let {&#10;                AccountDTO(it.id, it.accountNumber, it.balance)&#10;            }&#10;            val clientDTO = ClientDTO(&#10;                savedClient.id,&#10;                savedClient.name,&#10;                savedClient.email,&#10;                savedClient.cpf,&#10;                savedClient.birthDate?.toString(),&#10;                savedClient.address,&#10;                savedClient.phone,&#10;                savedClient.isActive,&#10;                account&#10;            )&#10;            ResponseEntity.ok(clientDTO)&#10;        } catch (e: IllegalArgumentException) {&#10;            ResponseEntity.badRequest().body(e.message)&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/clients&quot;)&#10;    fun getAllClients(): ResponseEntity&lt;List&lt;ClientDTO&gt;&gt; {&#10;        val clients = clientService.getAllClients()&#10;        val clientDTOs = clients.map { client -&gt;&#10;            val account = client.account?.let {&#10;                AccountDTO(it.id, it.accountNumber, it.balance)&#10;            }&#10;            ClientDTO(&#10;                client.id,&#10;                client.name,&#10;                client.email,&#10;                client.cpf,&#10;                client.birthDate?.toString(),&#10;                client.address,&#10;                client.phone,&#10;                client.isActive,&#10;                account&#10;            )&#10;        }&#10;        return ResponseEntity.ok(clientDTOs)&#10;    }&#10;&#10;    @GetMapping(&quot;/clients/{id}&quot;)&#10;    fun getClientById(@PathVariable id: Long): ResponseEntity&lt;ClientDTO&gt; {&#10;        val client = clientService.getClientById(id)&#10;        return if (client != null) {&#10;            val account = client.account?.let {&#10;                AccountDTO(it.id, it.accountNumber, it.balance)&#10;            }&#10;            val clientDTO = ClientDTO(&#10;                client.id,&#10;                client.name,&#10;                client.email,&#10;                client.cpf,&#10;                client.birthDate?.toString(),&#10;                client.address,&#10;                client.phone,&#10;                client.isActive,&#10;                account&#10;            )&#10;            ResponseEntity.ok(clientDTO)&#10;        } else {&#10;            ResponseEntity.notFound().build()&#10;        }&#10;    }&#10;&#10;    @PutMapping(&quot;/clients/{id}&quot;)&#10;    fun updateClient(@PathVariable id: Long, @RequestBody client: Client): ResponseEntity&lt;Client&gt; {&#10;        val updatedClient = clientService.updateClient(id, client)&#10;        return if (updatedClient != null) {&#10;            ResponseEntity.ok(updatedClient)&#10;        } else {&#10;            ResponseEntity.notFound().build()&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;/clients/{id}&quot;)&#10;    fun deleteClient(@PathVariable id: Long): ResponseEntity&lt;Void&gt; {&#10;        return try {&#10;            clientService.deleteClient(id)&#10;            ResponseEntity.noContent().build()&#10;        } catch (e: IllegalArgumentException) {&#10;            ResponseEntity.notFound().build()&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/login&quot;)&#10;    fun login(@RequestBody loginRequest: LoginRequest): ResponseEntity&lt;Any&gt; {&#10;        return try {&#10;            val client = clientService.login(loginRequest.email, loginRequest.password)&#10;            val account = client.account?.let {&#10;                AccountDTO(it.id, it.accountNumber, it.balance)&#10;            }&#10;            val clientDTO = ClientDTO(&#10;                client.id,&#10;                client.name,&#10;                client.email,&#10;                client.cpf,&#10;                client.birthDate?.toString(),&#10;                client.address,&#10;                client.phone,&#10;                client.isActive,&#10;                account&#10;            )&#10;            ResponseEntity.ok(clientDTO)&#10;        } catch (e: IllegalArgumentException) {&#10;            ResponseEntity.badRequest().body(e.message)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/demo/controller/TransactionController.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/demo/controller/TransactionController.kt" />
              <option name="updatedContent" value="package com.example.demo.controller&#10;&#10;import com.example.demo.service.TransactionService&#10;import com.example.demo.dto.TransactionRequest&#10;import com.example.demo.dto.TransferRequest&#10;import org.springframework.http.ResponseEntity&#10;import org.springframework.web.bind.annotation.*&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api&quot;)&#10;class TransactionController(private val transactionService: TransactionService) {&#10;&#10;    @PostMapping(&quot;/transactions&quot;)&#10;    fun createTransaction(@RequestBody request: TransactionRequest): ResponseEntity&lt;Any&gt; {&#10;        return try {&#10;            val transaction = when (request.type) {&#10;                &quot;DEPOSIT&quot; -&gt; transactionService.deposit(request.accountId, request.amount, request.description ?: &quot;Depósito&quot;)&#10;                &quot;WITHDRAWAL&quot; -&gt; transactionService.withdraw(request.accountId, request.amount, request.description ?: &quot;Saque&quot;)&#10;                else -&gt; throw IllegalArgumentException(&quot;Tipo de transação inválido.&quot;)&#10;            }&#10;            ResponseEntity.ok(transaction)&#10;        } catch (e: IllegalArgumentException) {&#10;            ResponseEntity.badRequest().body(e.message)&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/transfers&quot;)&#10;    fun transfer(@RequestBody request: TransferRequest): ResponseEntity&lt;Any&gt; {&#10;        return try {&#10;            val (outTransaction, inTransaction) = transactionService.transfer(&#10;                request.fromAccountId,&#10;                request.toAccountNumber,&#10;                request.amount,&#10;                request.description ?: &quot;Transferência&quot;&#10;            )&#10;            ResponseEntity.ok(mapOf(&#10;                &quot;outTransaction&quot; to outTransaction,&#10;                &quot;inTransaction&quot; to inTransaction,&#10;                &quot;message&quot; to &quot;Transferência realizada com sucesso&quot;&#10;            ))&#10;        } catch (e: IllegalArgumentException) {&#10;            ResponseEntity.badRequest().body(e.message)&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/accounts/{accountId}/transactions&quot;)&#10;    fun getTransactions(@PathVariable accountId: Long): ResponseEntity&lt;Any&gt; {&#10;        return try {&#10;            val transactions = transactionService.getTransactionsByAccount(accountId)&#10;            ResponseEntity.ok(transactions)&#10;        } catch (e: IllegalArgumentException) {&#10;            ResponseEntity.badRequest().body(e.message)&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/accounts/{accountId}/transactions/recent&quot;)&#10;    fun getRecentTransactions(@PathVariable accountId: Long): ResponseEntity&lt;Any&gt; {&#10;        return try {&#10;            val transactions = transactionService.getRecentTransactionsByAccount(accountId)&#10;            ResponseEntity.ok(transactions)&#10;        } catch (e: IllegalArgumentException) {&#10;            ResponseEntity.badRequest().body(e.message)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/demo/dto/ClientDTO.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/demo/dto/ClientDTO.kt" />
              <option name="originalContent" value="package com.example.demo.dto&#10;&#10;import com.example.demo.model.Address&#10;import com.example.demo.model.Phone&#10;&#10;// DTO para Account sem o campo client&#10;data class AccountDTO(&#10;    val id: Long?,&#10;    val accountNumber: String?,&#10;    val balance: Double?&#10;)&#10;&#10;// DTO para Client sem recursividade&#10;data class ClientDTO(&#10;    val id: Long?,&#10;    val name: String?,&#10;    val email: String?,&#10;    val cpf: String?,&#10;    val birthDate: String?,&#10;    val address: Address?,&#10;    val phone: Phone?,&#10;    val isActive: Boolean?,&#10;    val account: AccountDTO?&#10;)&#10;&#10;" />
              <option name="updatedContent" value="package com.example.demo.dto&#10;&#10;import com.example.demo.model.Address&#10;import com.example.demo.model.Phone&#10;&#10;// DTO para Account sem o campo client&#10;data class AccountDTO(&#10;    val id: Long?,&#10;    val accountNumber: String?,&#10;    val balance: Double?&#10;)&#10;&#10;// DTO para Client sem recursividade&#10;data class ClientDTO(&#10;    val id: Long?,&#10;    val name: String?,&#10;    val email: String?,&#10;    val cpf: String?,&#10;    val birthDate: String?,&#10;    val address: Address?,&#10;    val phone: Phone?,&#10;    val isActive: Boolean?,&#10;    val account: AccountDTO?&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/demo/dto/LoginRequest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/demo/dto/LoginRequest.kt" />
              <option name="updatedContent" value="package com.example.demo.dto&#10;&#10;data class LoginRequest(&#10;    val email: String,&#10;    val password: String&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/demo/dto/TransactionDTO.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/demo/dto/TransactionDTO.kt" />
              <option name="updatedContent" value="package com.example.demo.dto&#10;&#10;data class TransactionRequest(&#10;    val accountId: Long,&#10;    val amount: Double,&#10;    val type: String, // DEPOSIT ou WITHDRAWAL&#10;    val description: String?&#10;)&#10;&#10;data class TransferRequest(&#10;    val fromAccountId: Long,&#10;    val toAccountNumber: String,&#10;    val amount: Double,&#10;    val description: String?&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/demo/endpoint/GetClient.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/demo/endpoint/GetClient.kt" />
              <option name="originalContent" value="package com.example.demo.endpoint&#10;&#10;import com.example.demo.model.Client&#10;import com.example.demo.model.Account&#10;import com.example.demo.model.Payment&#10;import org.springframework.web.bind.annotation.GetMapping&#10;import org.springframework.web.bind.annotation.PathVariable&#10;import org.springframework.web.bind.annotation.RequestMapping&#10;import org.springframework.web.bind.annotation.RestController&#10;&#10;&#10;@GetMapping(&quot;/clients/{id}&quot;)&#10;@RestController&#10;@RequestMapping(&quot;/api&quot;)&#10;class GetClient {" />
              <option name="updatedContent" value="package com.example.demo.endpoint&#10;&#10;import com.example.demo.model.Client&#10;import com.example.demo.repository.ClientRepository&#10;import org.springframework.http.ResponseEntity&#10;import org.springframework.web.bind.annotation.GetMapping&#10;import org.springframework.web.bind.annotation.PathVariable&#10;import org.springframework.web.bind.annotation.RequestMapping&#10;import org.springframework.web.bind.annotation.RestController&#10;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api&quot;)&#10;class GetClient(private val clientRepository: ClientRepository) {&#10;    @GetMapping(&quot;/clients/{id}&quot;)&#10;    fun getClientById(@PathVariable id: Long): ResponseEntity&lt;Client&gt; {&#10;        val client = clientRepository.findById(id)&#10;        return if (client.isPresent) {&#10;            ResponseEntity.ok(client.get())&#10;        } else {&#10;            ResponseEntity.notFound().build()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/demo/model/Account.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/demo/model/Account.kt" />
              <option name="originalContent" value="package com.example.demo.model&#10;&#10;import jakarta.persistence.*&#10;&#10;@Entity&#10;@Table(name = &quot;accounts&quot;)&#10;data class Account(&#10;    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    val id: Long = 0,&#10;    @Column(unique = true, nullable = false)&#10;    val accountNumber: String = &quot;&quot;,&#10;    val balance: Double = 0.0,&#10;    @OneToOne&#10;    @JoinColumn(name = &quot;client_id&quot;)&#10;    val client: Client? = null&#10;)&#10;&#10;" />
              <option name="updatedContent" value="package com.example.demo.model&#13;&#10;&#13;&#10;import com.fasterxml.jackson.annotation.JsonIgnore&#13;&#10;import jakarta.persistence.*&#13;&#10;&#13;&#10;@Entity&#13;&#10;@Table(name = &quot;accounts&quot;)&#13;&#10;data class Account(&#13;&#10;    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)&#13;&#10;    val id: Long = 0,&#13;&#10;    @Column(unique = true, nullable = false)&#13;&#10;    val accountNumber: String = &quot;&quot;,&#13;&#10;    val balance: Double = 0.0,&#13;&#10;    @OneToOne&#13;&#10;    @JoinColumn(name = &quot;client_id&quot;)&#13;&#10;    @JsonIgnore&#13;&#10;    val client: Client? = null&#13;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/demo/model/Client.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/demo/model/Client.kt" />
              <option name="originalContent" value="package com.example.demo.model&#10;import jakarta.persistence.*&#10;import java.time.LocalDate&#10;&#10;@Entity&#10;data class Client(&#10;    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    val id: Long = 0,&#10;    val name: String = &quot;&quot;,&#10;    val email: String = &quot;&quot;,&#10;    val cpf: String = &quot;&quot;,&#10;    val birthDate: LocalDate,&#10;    @Embedded&#10;    val address: Address,&#10;    @Embedded&#10;    val phone: Phone,&#10;    val isActive: Boolean = true,&#10;    @OneToOne(mappedBy = &quot;client&quot;, cascade = [CascadeType.ALL], fetch = FetchType.LAZY)&#10;    val account: Account? = null,&#10;    val password: String = &quot;&quot;&#10;)&#10;&#10;@Embeddable&#10;data class Phone(&#10;    val countryCode: String = &quot;&quot;,&#10;    val areaCode: String = &quot;&quot;,&#10;    val numberCode: String = &quot;&quot;&#10;)&#10;&#10;@Embeddable&#10;data class Address(&#10;    val street: String = &quot;&quot;,&#10;    val number: String = &quot;&quot;,&#10;    val complement: String = &quot;&quot;,&#10;    val neighborhood: String = &quot;&quot;,&#10;    val city: String = &quot;&quot;,&#10;    val state: String = &quot;&quot;,&#10;    val zipCode: String = &quot;&quot;&#10;)&#10;&#10;fun Client.toDTO() = com.example.demo.dto.ClientDTO(&#10;    id = this.id,&#10;    name = this.name,&#10;    email = this.email,&#10;    cpf = this.cpf,&#10;    birthDate = this.birthDate.toString(),&#10;    address = this.address,&#10;    phone = this.phone,&#10;    isActive = this.isActive,&#10;    account = this.account?.let {&#10;        com.example.demo.dto.AccountDTO(&#10;            id = it.id,&#10;            accountNumber = it.accountNumber,&#10;            balance = it.balance&#10;        )&#10;    }&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.demo.model&#13;&#10;import jakarta.persistence.*&#13;&#10;import java.time.LocalDate&#13;&#10;&#13;&#10;@Entity&#13;&#10;data class Client(&#13;&#10;    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)&#13;&#10;    val id: Long = 0,&#13;&#10;    val name: String = &quot;&quot;,&#13;&#10;    val email: String = &quot;&quot;,&#13;&#10;    val cpf: String = &quot;&quot;,&#13;&#10;    val birthDate: LocalDate,&#13;&#10;    @Embedded&#13;&#10;    val address: Address,&#13;&#10;    @Embedded&#13;&#10;    val phone: Phone,&#13;&#10;    val isActive: Boolean = true,&#13;&#10;    @OneToOne(mappedBy = &quot;client&quot;, cascade = [CascadeType.ALL], fetch = FetchType.LAZY)&#13;&#10;    val account: Account? = null,&#13;&#10;    val password: String = &quot;&quot;&#13;&#10;) {&#13;&#10;    init {&#13;&#10;        require(password.length &gt;= 6) { &quot;A senha deve ter no mínimo 6 dígitos.&quot; }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Embeddable&#13;&#10;data class Phone(&#13;&#10;    val countryCode: String = &quot;&quot;,&#13;&#10;    val areaCode: String = &quot;&quot;,&#13;&#10;    val numberCode: String = &quot;&quot;&#13;&#10;)&#13;&#10;&#13;&#10;@Embeddable&#13;&#10;data class Address(&#13;&#10;    val street: String = &quot;&quot;,&#13;&#10;    val number: String = &quot;&quot;,&#13;&#10;    val complement: String = &quot;&quot;,&#13;&#10;    val neighborhood: String = &quot;&quot;,&#13;&#10;    val city: String = &quot;&quot;,&#13;&#10;    val state: String = &quot;&quot;,&#13;&#10;    val zipCode: String = &quot;&quot;&#13;&#10;)&#13;&#10;&#13;&#10;fun Client.toDTO() = com.example.demo.dto.ClientDTO(&#13;&#10;    id = this.id,&#13;&#10;    name = this.name,&#13;&#10;    email = this.email,&#13;&#10;    cpf = this.cpf,&#13;&#10;    birthDate = this.birthDate.toString(),&#13;&#10;    address = this.address,&#13;&#10;    phone = this.phone,&#13;&#10;    isActive = this.isActive,&#13;&#10;    account = this.account?.let {&#13;&#10;        com.example.demo.dto.AccountDTO(&#13;&#10;            id = it.id,&#13;&#10;            accountNumber = it.accountNumber,&#13;&#10;            balance = it.balance&#13;&#10;        )&#13;&#10;    }&#13;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/demo/model/Transaction.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/demo/model/Transaction.kt" />
              <option name="updatedContent" value="package com.example.demo.model&#10;&#10;import jakarta.persistence.*&#10;import java.time.LocalDateTime&#10;&#10;@Entity&#10;@Table(name = &quot;transactions&quot;)&#10;data class Transaction(&#10;    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    val id: Long = 0,&#10;    &#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;account_id&quot;)&#10;    val account: Account,&#10;    &#10;    @Enumerated(EnumType.STRING)&#10;    val type: TransactionType,&#10;    &#10;    val amount: Double,&#10;    val description: String = &quot;&quot;,&#10;    val createdAt: LocalDateTime = LocalDateTime.now(),&#10;    &#10;    @Enumerated(EnumType.STRING)&#10;    val status: TransactionStatus = TransactionStatus.COMPLETED,&#10;    &#10;    // Para transferências&#10;    val toAccountNumber: String? = null,&#10;    val fromAccountNumber: String? = null&#10;)&#10;&#10;enum class TransactionType {&#10;    DEPOSIT,&#10;    WITHDRAWAL, &#10;    TRANSFER_OUT,&#10;    TRANSFER_IN&#10;}&#10;&#10;enum class TransactionStatus {&#10;    PENDING,&#10;    COMPLETED,&#10;    FAILED,&#10;    CANCELLED&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/demo/repository/AccountRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/demo/repository/AccountRepository.kt" />
              <option name="originalContent" value="package com.example.demo.repository&#10;&#10;import com.example.demo.model.Account&#10;import org.springframework.data.jpa.repository.JpaRepository&#10;import org.springframework.stereotype.Repository&#10;&#10;@Repository&#10;interface AccountRepository : JpaRepository&lt;Account, Long&gt;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.demo.repository&#13;&#10;&#13;&#10;import com.example.demo.model.Account&#13;&#10;import org.springframework.data.jpa.repository.JpaRepository&#13;&#10;import org.springframework.stereotype.Repository&#13;&#10;&#13;&#10;@Repository&#13;&#10;interface AccountRepository : JpaRepository&lt;Account, Long&gt; {&#13;&#10;    fun findByAccountNumber(accountNumber: String): Account?&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/demo/repository/ClientRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/demo/repository/ClientRepository.kt" />
              <option name="originalContent" value="package com.example.demo.repository&#10;&#10;import com.example.demo.model.Client&#10;import org.springframework.data.jpa.repository.JpaRepository&#10;&#10;interface ClientRepository : JpaRepository&lt;Client, Long&gt;&#10;" />
              <option name="updatedContent" value="package com.example.demo.repository&#10;&#10;import com.example.demo.model.Client&#10;import org.springframework.data.jpa.repository.JpaRepository&#10;import org.springframework.stereotype.Repository&#10;&#10;@Repository&#10;interface ClientRepository : JpaRepository&lt;Client, Long&gt; {&#10;    fun existsByCpf(cpf: String): Boolean&#10;    fun existsByEmail(email: String): Boolean&#10;    fun findByEmail(email: String): Client?&#10;    fun findByCpf(cpf: String): Client?&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/demo/repository/TransactionRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/demo/repository/TransactionRepository.kt" />
              <option name="updatedContent" value="package com.example.demo.repository&#10;&#10;import com.example.demo.model.Transaction&#10;import org.springframework.data.jpa.repository.JpaRepository&#10;import org.springframework.stereotype.Repository&#10;&#10;@Repository&#10;interface TransactionRepository : JpaRepository&lt;Transaction, Long&gt; {&#10;    fun findByAccountIdOrderByCreatedAtDesc(accountId: Long): List&lt;Transaction&gt;&#10;    fun findTop10ByAccountIdOrderByCreatedAtDesc(accountId: Long): List&lt;Transaction&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/demo/service/ClientService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/demo/service/ClientService.kt" />
              <option name="originalContent" value="package com.example.demo.service&#10;&#10;import org.springframework.stereotype.Service&#10;import com.example.demo.model.Client&#10;import com.example.demo.repository.ClientRepository&#10;import com.example.demo.model.Account&#10;import com.example.demo.repository.AccountRepository&#10;import java.util.UUID&#10;&#10;@Service&#10;class ClientService(&#10;    private val clientRepository: ClientRepository,&#10;    private val accountRepository: AccountRepository&#10;) {&#10;    fun createClient(client: Client): Client {&#10;        if (clientRepository.existsByCpf(client.cpf)) {&#10;            throw IllegalArgumentException(&quot;Já existe um cliente com este CPF.&quot;)&#10;        }&#10;        if (clientRepository.existsByEmail(client.email)) {&#10;            throw IllegalArgumentException(&quot;Já existe um cliente com este email.&quot;)&#10;        }&#10;        if (client.password.length &lt; 6) {&#10;            throw IllegalArgumentException(&quot;A senha deve ter pelo menos 6 dígitos.&quot;)&#10;        }&#10;        val accountNumber = UUID.randomUUID().toString().substring(0, 10)&#10;        val account = Account(accountNumber = accountNumber, balance = 0.0)&#10;        val clientWithAccount = client.copy(account = account)&#10;        val savedClient = clientRepository.save(clientWithAccount)&#10;        val savedAccount = account.copy(client = savedClient)&#10;        accountRepository.save(savedAccount)&#10;        return savedClient&#10;    }&#10;    fun getAllClients(): List&lt;Client&gt; {&#10;        return clientRepository.findAll()&#10;    }&#10;    fun getClientById(id: Long): Client? {&#10;        return clientRepository.findById(id).orElse(null)&#10;    }&#10;    fun updateClient(id: Long, client: Client): Client? {&#10;        return if (clientRepository.existsById(id)) {&#10;            clientRepository.save(client.copy(id = id))&#10;        } else {&#10;            null&#10;        }&#10;    }&#10;    fun deleteClient(id: Long) {&#10;        if (clientRepository.existsById(id)) {&#10;            clientRepository.deleteById(id)&#10;        } else {&#10;            throw IllegalArgumentException(&quot;Client with id $id does not exist&quot;)&#10;        }&#10;    }&#10;    fun login(email: String, password: String): Client {&#10;        val client = clientRepository.findAll().find { it.email == email }&#10;            ?: throw IllegalArgumentException(&quot;Email ou senha inválidos.&quot;)&#10;        if (client.password != password) {&#10;            throw IllegalArgumentException(&quot;Email ou senha inválidos.&quot;)&#10;        }&#10;        return client&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.demo.service&#10;&#10;import org.springframework.stereotype.Service&#10;import com.example.demo.model.Client&#10;import com.example.demo.repository.ClientRepository&#10;import com.example.demo.model.Account&#10;import com.example.demo.repository.AccountRepository&#10;import java.util.UUID&#10;&#10;@Service&#10;class ClientService(&#10;    private val clientRepository: ClientRepository,&#10;    private val accountRepository: AccountRepository&#10;) {&#10;    fun createClient(client: Client): Client {&#10;        // Validação de senha obrigatória&#10;        if (client.password.length &lt; 6) {&#10;            throw IllegalArgumentException(&quot;A senha deve ter pelo menos 6 dígitos.&quot;)&#10;        }&#10;        &#10;        // Bloqueia cadastro se já existe CPF&#10;        if (clientRepository.existsByCpf(client.cpf)) {&#10;            throw IllegalArgumentException(&quot;Já existe um cliente com este CPF.&quot;)&#10;        }&#10;        &#10;        // Bloqueia cadastro de dois CPFs diferentes para o mesmo email&#10;        val existingByEmail = clientRepository.findByEmail(client.email)&#10;        if (existingByEmail != null &amp;&amp; existingByEmail.cpf != client.cpf) {&#10;            throw IllegalArgumentException(&quot;Não é permitido cadastrar dois CPFs diferentes para o mesmo email.&quot;)&#10;        }&#10;        &#10;        val accountNumber = UUID.randomUUID().toString().substring(0, 10)&#10;        val account = Account(accountNumber = accountNumber, balance = 0.0)&#10;        val clientWithAccount = client.copy(account = account)&#10;        val savedClient = clientRepository.save(clientWithAccount)&#10;        val savedAccount = account.copy(client = savedClient)&#10;        accountRepository.save(savedAccount)&#10;        return savedClient&#10;    }&#10;    fun getAllClients(): List&lt;Client&gt; {&#10;        return clientRepository.findAll()&#10;    }&#10;    fun getClientById(id: Long): Client? {&#10;        return clientRepository.findById(id).orElse(null)&#10;    }&#10;    fun updateClient(id: Long, client: Client): Client? {&#10;        return if (clientRepository.existsById(id)) {&#10;            clientRepository.save(client.copy(id = id))&#10;        } else {&#10;            null&#10;        }&#10;    }&#10;    fun deleteClient(id: Long) {&#10;        if (clientRepository.existsById(id)) {&#10;            clientRepository.deleteById(id)&#10;        } else {&#10;            throw IllegalArgumentException(&quot;Client with id $id does not exist&quot;)&#10;        }&#10;    }&#10;    fun login(email: String, password: String): Client {&#10;        // Validação de senha mínima no login&#10;        if (password.length &lt; 6) {&#10;            throw IllegalArgumentException(&quot;A senha deve ter pelo menos 6 dígitos.&quot;)&#10;        }&#10;        &#10;        val client = clientRepository.findByEmail(email)&#10;            ?: throw IllegalArgumentException(&quot;Email ou senha inválidos.&quot;)&#10;            &#10;        if (client.password != password) {&#10;            throw IllegalArgumentException(&quot;Email ou senha inválidos.&quot;)&#10;        }&#10;        return client&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/demo/service/TransactionService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/demo/service/TransactionService.kt" />
              <option name="originalContent" value="&#10;        val account = accountRepository.findById(accountId)&#10;            .orElseThrow { IllegalArgumentException(&quot;Conta não encontrada.&quot;) }&#10;&#10;        // Atualizar saldo da conta&#10;        val updatedAccount = account.copy(balance = account.balance + amount)&#10;        accountRepository.save(updatedAccount)&#10;&#10;        // Criar transação&#10;        val transaction = Transaction(&#10;            account = updatedAccount,&#10;            type = TransactionType.DEPOSIT,&#10;            amount = amount,&#10;            description = description,&#10;            createdAt = LocalDateTime.now(),&#10;            status = TransactionStatus.COMPLETED&#10;        )&#10;&#10;        return transactionRepository.save(transaction)&#10;    }&#10;&#10;    @Transactional&#10;    fun withdraw(accountId: Long, amount: Double, description: String): Transaction {&#10;        if (amount &lt;= 0) {&#10;            throw IllegalArgumentException(&quot;O valor do saque deve ser maior que zero.&quot;)&#10;        }&#10;&#10;        val account = accountRepository.findById(accountId)&#10;            .orElseThrow { IllegalArgumentException(&quot;Conta não encontrada.&quot;) }&#10;&#10;        if (account.balance &lt; amount) {&#10;            throw IllegalArgumentException(&quot;Saldo insuficiente para realizar o saque.&quot;)&#10;        }&#10;&#10;        // Atualizar saldo da conta&#10;        val updatedAccount = account.copy(balance = account.balance - amount)&#10;        accountRepository.save(updatedAccount)&#10;&#10;        // Criar transação&#10;        val transaction = Transaction(&#10;            account = updatedAccount,&#10;            type = TransactionType.WITHDRAWAL,&#10;            amount = amount,&#10;            description = description,&#10;            createdAt = LocalDateTime.now(),&#10;            status = TransactionStatus.COMPLETED&#10;        )&#10;&#10;        return transactionRepository.save(transaction)&#10;    }&#10;&#10;    @Transactional&#10;    fun transfer(fromAccountId: Long, toAccountNumber: String, amount: Double, description: String): Pair&lt;Transaction, Transaction&gt; {&#10;        if (amount &lt;= 0) {&#10;            throw IllegalArgumentException(&quot;O valor da transferência deve ser maior que zero.&quot;)&#10;        }&#10;&#10;        val fromAccount = accountRepository.findById(fromAccountId)&#10;            .orElseThrow { IllegalArgumentException(&quot;Conta de origem não encontrada.&quot;) }&#10;&#10;        val toAccount = accountRepository.findByAccountNumber(toAccountNumber)&#10;            ?: throw IllegalArgumentException(&quot;Conta de destino não encontrada.&quot;)&#10;&#10;        if (fromAccount.balance &lt; amount) {&#10;            throw IllegalArgumentException(&quot;Saldo insuficiente para realizar a transferência.&quot;)&#10;        }&#10;&#10;        if (fromAccount.accountNumber == toAccountNumber) {&#10;            throw IllegalArgumentException(&quot;Não é possível transferir para a mesma conta.&quot;)&#10;        }&#10;&#10;        // Atualizar saldos&#10;        val updatedFromAccount = fromAccount.copy(balance = fromAccount.balance - amount)&#10;        val updatedToAccount = toAccount.copy(balance = toAccount.balance + amount)&#10;        &#10;        accountRepository.save(updatedFromAccount)&#10;        accountRepository.save(updatedToAccount)&#10;&#10;        // Criar transações&#10;        val outTransaction = Transaction(&#10;            account = updatedFromAccount,&#10;            type = TransactionType.TRANSFER_OUT,&#10;            amount = amount,&#10;            description = description,&#10;            createdAt = LocalDateTime.now(),&#10;            status = TransactionStatus.COMPLETED,&#10;            toAccountNumber = toAccountNumber&#10;        )&#10;&#10;        val inTransaction = Transaction(&#10;            account = updatedToAccount,&#10;            type = TransactionType.TRANSFER_IN,&#10;            amount = amount,&#10;            description = description,&#10;            createdAt = LocalDateTime.now(),&#10;            status = TransactionStatus.COMPLETED,&#10;            fromAccountNumber = fromAccount.accountNumber&#10;        )&#10;&#10;        val savedOutTransaction = transactionRepository.save(outTransaction)&#10;        val savedInTransaction = transactionRepository.save(inTransaction)&#10;&#10;        return Pair(savedOutTransaction, savedInTransaction)&#10;    }&#10;&#10;    fun getTransactionsByAccount(accountId: Long): List&lt;Transaction&gt; {&#10;        return transactionRepository.findByAccountIdOrderByCreatedAtDesc(accountId)&#10;    }&#10;&#10;    fun getRecentTransactionsByAccount(accountId: Long): List&lt;Transaction&gt; {&#10;        return transactionRepository.findTop10ByAccountIdOrderByCreatedAtDesc(accountId)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.demo.service&#10;&#10;import com.example.demo.model.*&#10;import com.example.demo.repository.AccountRepository&#10;import com.example.demo.repository.TransactionRepository&#10;import org.springframework.stereotype.Service&#10;import org.springframework.transaction.annotation.Transactional&#10;import java.time.LocalDateTime&#10;&#10;@Service&#10;class TransactionService(&#10;    private val transactionRepository: TransactionRepository,&#10;    private val accountRepository: AccountRepository&#10;) {&#10;&#10;    @Transactional&#10;    fun deposit(accountId: Long, amount: Double, description: String): Transaction {&#10;        if (amount &lt;= 0) {&#10;            throw IllegalArgumentException(&quot;O valor do depósito deve ser maior que zero.&quot;)&#10;        }&#10;&#10;        val account = accountRepository.findById(accountId)&#10;            .orElseThrow { IllegalArgumentException(&quot;Conta não encontrada.&quot;) }&#10;&#10;        // Atualizar saldo da conta&#10;        val updatedAccount = account.copy(balance = account.balance + amount)&#10;        accountRepository.save(updatedAccount)&#10;&#10;        // Criar transação&#10;        val transaction = Transaction(&#10;            account = updatedAccount,&#10;            type = TransactionType.DEPOSIT,&#10;            amount = amount,&#10;            description = description,&#10;            createdAt = LocalDateTime.now(),&#10;            status = TransactionStatus.COMPLETED&#10;        )&#10;&#10;        return transactionRepository.save(transaction)&#10;    }&#10;&#10;    @Transactional&#10;    fun withdraw(accountId: Long, amount: Double, description: String): Transaction {&#10;        if (amount &lt;= 0) {&#10;            throw IllegalArgumentException(&quot;O valor do saque deve ser maior que zero.&quot;)&#10;        }&#10;&#10;        val account = accountRepository.findById(accountId)&#10;            .orElseThrow { IllegalArgumentException(&quot;Conta não encontrada.&quot;) }&#10;&#10;        if (account.balance &lt; amount) {&#10;            throw IllegalArgumentException(&quot;Saldo insuficiente para realizar o saque.&quot;)&#10;        }&#10;&#10;        // Atualizar saldo da conta&#10;        val updatedAccount = account.copy(balance = account.balance - amount)&#10;        accountRepository.save(updatedAccount)&#10;&#10;        // Criar transação&#10;        val transaction = Transaction(&#10;            account = updatedAccount,&#10;            type = TransactionType.WITHDRAWAL,&#10;            amount = amount,&#10;            description = description,&#10;            createdAt = LocalDateTime.now(),&#10;            status = TransactionStatus.COMPLETED&#10;        )&#10;&#10;        return transactionRepository.save(transaction)&#10;    }&#10;&#10;    @Transactional&#10;    fun transfer(fromAccountId: Long, toAccountNumber: String, amount: Double, description: String): Pair&lt;Transaction, Transaction&gt; {&#10;        if (amount &lt;= 0) {&#10;            throw IllegalArgumentException(&quot;O valor da transferência deve ser maior que zero.&quot;)&#10;        }&#10;&#10;        val fromAccount = accountRepository.findById(fromAccountId)&#10;            .orElseThrow { IllegalArgumentException(&quot;Conta de origem não encontrada.&quot;) }&#10;&#10;        val toAccount = accountRepository.findByAccountNumber(toAccountNumber)&#10;            ?: throw IllegalArgumentException(&quot;Conta de destino não encontrada.&quot;)&#10;&#10;        if (fromAccount.balance &lt; amount) {&#10;            throw IllegalArgumentException(&quot;Saldo insuficiente para realizar a transferência.&quot;)&#10;        }&#10;&#10;        if (fromAccount.accountNumber == toAccountNumber) {&#10;            throw IllegalArgumentException(&quot;Não é possível transferir para a mesma conta.&quot;)&#10;        }&#10;&#10;        // Atualizar saldos&#10;        val updatedFromAccount = fromAccount.copy(balance = fromAccount.balance - amount)&#10;        val updatedToAccount = toAccount.copy(balance = toAccount.balance + amount)&#10;        &#10;        accountRepository.save(updatedFromAccount)&#10;        accountRepository.save(updatedToAccount)&#10;&#10;        // Criar transações&#10;        val outTransaction = Transaction(&#10;            account = updatedFromAccount,&#10;            type = TransactionType.TRANSFER_OUT,&#10;            amount = amount,&#10;            description = description,&#10;            createdAt = LocalDateTime.now(),&#10;            status = TransactionStatus.COMPLETED,&#10;            toAccountNumber = toAccountNumber&#10;        )&#10;&#10;        val inTransaction = Transaction(&#10;            account = updatedToAccount,&#10;            type = TransactionType.TRANSFER_IN,&#10;            amount = amount,&#10;            description = description,&#10;            createdAt = LocalDateTime.now(),&#10;            status = TransactionStatus.COMPLETED,&#10;            fromAccountNumber = fromAccount.accountNumber&#10;        )&#10;&#10;        val savedOutTransaction = transactionRepository.save(outTransaction)&#10;        val savedInTransaction = transactionRepository.save(inTransaction)&#10;&#10;        return Pair(savedOutTransaction, savedInTransaction)&#10;    }&#10;&#10;    fun getTransactionsByAccount(accountId: Long): List&lt;Transaction&gt; {&#10;        return transactionRepository.findByAccountIdOrderByCreatedAtDesc(accountId)&#10;    }&#10;&#10;    fun getRecentTransactionsByAccount(accountId: Long): List&lt;Transaction&gt; {&#10;        return transactionRepository.findTop10ByAccountIdOrderByCreatedAtDesc(accountId)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/static/cadastro.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/static/cadastro.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;pt-br&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Cadastro - Banco ADA&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css&quot;&gt;&#10;    &lt;style&gt;&#10;        body {&#10;            background: linear-gradient(135deg, #0033a0 0%, #0066cc 100%);&#10;            color: white;&#10;            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;&#10;            min-height: 100vh;&#10;            margin: 0;&#10;            padding: 20px 0 50px 0;&#10;        }&#10;        .background-pattern {&#10;            position: fixed;&#10;            top: 0;&#10;            left: 0;&#10;            width: 100%;&#10;            height: 100%;&#10;            background-image: url('data:image/svg+xml;utf8,&lt;svg width=&quot;100&quot; height=&quot;100&quot; viewBox=&quot;0 0 100 100&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path fill=&quot;%230055b3&quot; fill-opacity=&quot;0.1&quot; d=&quot;M50 0 L100 50 L50 100 L0 50 Z&quot; /&gt;&lt;/svg&gt;');&#10;            background-size: 200px 200px;&#10;            z-index: -1;&#10;        }&#10;        .header {&#10;            padding: 20px 0;&#10;            margin-bottom: 20px;&#10;            text-align: center;&#10;        }&#10;        .logo {&#10;            font-size: 40px;&#10;            font-weight: bold;&#10;            color: white;&#10;            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);&#10;            margin-bottom: 10px;&#10;        }&#10;        .container {&#10;            max-width: 850px;&#10;            margin: 0 auto 30px auto;&#10;            background-color: rgba(255, 255, 255, 0.95);&#10;            padding: 30px;&#10;            border-radius: 15px;&#10;            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);&#10;            color: #333;&#10;        }&#10;        .form-group {&#10;            margin-bottom: 20px;&#10;        }&#10;        .form-label {&#10;            font-weight: 600;&#10;            margin-bottom: 8px;&#10;            color: #0033a0;&#10;        }&#10;        .form-control {&#10;            border: 1px solid #ced4da;&#10;            padding: 12px;&#10;            border-radius: 8px;&#10;            transition: all 0.3s;&#10;        }&#10;        .form-control:focus {&#10;            border-color: #0033a0;&#10;            box-shadow: 0 0 0 0.25rem rgba(0, 51, 160, 0.25);&#10;        }&#10;        .section-title {&#10;            margin-top: 25px;&#10;            margin-bottom: 15px;&#10;            padding-bottom: 10px;&#10;            border-bottom: 2px solid #0033a0;&#10;            color: #0033a0;&#10;            font-weight: 600;&#10;            display: flex;&#10;            align-items: center;&#10;        }&#10;        .section-title i {&#10;            margin-right: 10px;&#10;            font-size: 1.2em;&#10;        }&#10;        .btn-success {&#10;            background-color: #28a745;&#10;            border-color: #28a745;&#10;            padding: 12px 30px;&#10;            font-weight: 600;&#10;            transition: all 0.3s;&#10;        }&#10;        .btn-success:hover {&#10;            background-color: #218838;&#10;            transform: translateY(-3px);&#10;            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);&#10;        }&#10;        .btn-secondary {&#10;            background-color: #6c757d;&#10;            border-color: #6c757d;&#10;            padding: 12px 30px;&#10;            font-weight: 600;&#10;            transition: all 0.3s;&#10;        }&#10;        .btn-secondary:hover {&#10;            background-color: #5a6268;&#10;            transform: translateY(-3px);&#10;            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);&#10;        }&#10;        .alert {&#10;            display: none;&#10;            margin-top: 20px;&#10;            padding: 15px;&#10;            border-radius: 8px;&#10;        }&#10;        .footer {&#10;            text-align: center;&#10;            margin-top: 30px;&#10;            color: rgba(255, 255, 255, 0.7);&#10;            font-size: 14px;&#10;        }&#10;        .card-badge {&#10;            position: absolute;&#10;            top: 15px;&#10;            right: 15px;&#10;            display: flex;&#10;            align-items: center;&#10;            background-color: rgba(0, 51, 160, 0.1);&#10;            padding: 10px 15px;&#10;            border-radius: 8px;&#10;            color: #0033a0;&#10;        }&#10;        .card-badge i {&#10;            font-size: 24px;&#10;            margin-right: 10px;&#10;        }&#10;        .secure-info {&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            margin-top: 20px;&#10;            color: #6c757d;&#10;            font-size: 14px;&#10;            background-color: rgba(0, 51, 160, 0.05);&#10;            padding: 10px;&#10;            border-radius: 8px;&#10;        }&#10;        .secure-info i {&#10;            margin-right: 8px;&#10;            color: #28a745;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;background-pattern&quot;&gt;&lt;/div&gt;&#10;&#10;    &lt;div class=&quot;header&quot;&gt;&#10;        &lt;a href=&quot;index.html&quot; class=&quot;text-decoration-none&quot;&gt;&#10;            &lt;div class=&quot;logo&quot;&gt;&#10;                &lt;i class=&quot;fas fa-landmark me-2&quot;&gt;&lt;/i&gt; Banco ADA&#10;            &lt;/div&gt;&#10;        &lt;/a&gt;&#10;        &lt;p&gt;Crie sua conta bancária e comece a investir no seu futuro&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;container position-relative&quot;&gt;&#10;        &lt;div class=&quot;card-badge&quot;&gt;&#10;            &lt;i class=&quot;fas fa-university&quot;&gt;&lt;/i&gt;&#10;            &lt;span&gt;Abra sua conta&lt;br&gt;100% digital&lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;h2 class=&quot;text-center mb-4&quot;&gt;Cadastro de Cliente&lt;/h2&gt;&#10;&#10;        &lt;form id=&quot;cadastroForm&quot;&gt;&#10;            &lt;!-- Dados Pessoais --&gt;&#10;            &lt;h5 class=&quot;section-title&quot;&gt;&#10;                &lt;i class=&quot;fas fa-user&quot;&gt;&lt;/i&gt; Dados Pessoais&#10;            &lt;/h5&gt;&#10;            &lt;div class=&quot;row&quot;&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;nome&quot; class=&quot;form-label&quot;&gt;Nome Completo&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;nome&quot; name=&quot;nome&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;email&quot; class=&quot;form-label&quot;&gt;Email&lt;/label&gt;&#10;                    &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;email&quot; name=&quot;email&quot; required&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;row&quot;&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;cpf&quot; class=&quot;form-label&quot;&gt;CPF&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;cpf&quot; name=&quot;cpf&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;nascimento&quot; class=&quot;form-label&quot;&gt;Data de Nascimento&lt;/label&gt;&#10;                    &lt;input type=&quot;date&quot; class=&quot;form-control&quot; id=&quot;nascimento&quot; name=&quot;nascimento&quot; required&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Endereço --&gt;&#10;            &lt;h5 class=&quot;section-title&quot;&gt;&#10;                &lt;i class=&quot;fas fa-home&quot;&gt;&lt;/i&gt; Endereço&#10;            &lt;/h5&gt;&#10;            &lt;div class=&quot;row&quot;&gt;&#10;                &lt;div class=&quot;col-md-8 form-group&quot;&gt;&#10;                    &lt;label for=&quot;rua&quot; class=&quot;form-label&quot;&gt;Rua&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;rua&quot; name=&quot;rua&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-4 form-group&quot;&gt;&#10;                    &lt;label for=&quot;numero&quot; class=&quot;form-label&quot;&gt;Número&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;numero&quot; name=&quot;numero&quot; required&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;row&quot;&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;complemento&quot; class=&quot;form-label&quot;&gt;Complemento&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;complemento&quot; name=&quot;complemento&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;bairro&quot; class=&quot;form-label&quot;&gt;Bairro&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;bairro&quot; name=&quot;bairro&quot; required&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;row&quot;&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;cidade&quot; class=&quot;form-label&quot;&gt;Cidade&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;cidade&quot; name=&quot;cidade&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-3 form-group&quot;&gt;&#10;                    &lt;label for=&quot;estado&quot; class=&quot;form-label&quot;&gt;Estado&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;estado&quot; name=&quot;estado&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-3 form-group&quot;&gt;&#10;                    &lt;label for=&quot;cep&quot; class=&quot;form-label&quot;&gt;CEP&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;cep&quot; name=&quot;cep&quot; required&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Telefone --&gt;&#10;            &lt;h5 class=&quot;section-title&quot;&gt;&#10;                &lt;i class=&quot;fas fa-phone&quot;&gt;&lt;/i&gt; Telefone&#10;            &lt;/h5&gt;&#10;            &lt;div class=&quot;row&quot;&gt;&#10;                &lt;div class=&quot;col-md-4 form-group&quot;&gt;&#10;                    &lt;label for=&quot;codigoPais&quot; class=&quot;form-label&quot;&gt;Código do País&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;codigoPais&quot; name=&quot;codigoPais&quot; placeholder=&quot;+55&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-4 form-group&quot;&gt;&#10;                    &lt;label for=&quot;ddd&quot; class=&quot;form-label&quot;&gt;DDD&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;ddd&quot; name=&quot;ddd&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-4 form-group&quot;&gt;&#10;                    &lt;label for=&quot;telefone&quot; class=&quot;form-label&quot;&gt;Número&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;telefone&quot; name=&quot;telefone&quot; required&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;text-center mt-4&quot;&gt;&#10;                &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-check-circle me-2&quot;&gt;&lt;/i&gt;Cadastrar&#10;                &lt;/button&gt;&#10;                &lt;a href=&quot;index.html&quot; class=&quot;btn btn-secondary ms-2&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-arrow-left me-2&quot;&gt;&lt;/i&gt;Voltar&#10;                &lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/form&gt;&#10;&#10;        &lt;div class=&quot;alert alert-danger mt-3&quot; id=&quot;errorAlert&quot;&gt;&lt;/div&gt;&#10;        &lt;div class=&quot;alert alert-success mt-3&quot; id=&quot;successAlert&quot;&gt;&lt;/div&gt;&#10;&#10;        &lt;div class=&quot;secure-info&quot;&gt;&#10;            &lt;i class=&quot;fas fa-shield-alt&quot;&gt;&lt;/i&gt;&#10;            Seus dados estão protegidos com o mais alto padrão de segurança. Ao se cadastrar, você concorda com nossa política de privacidade.&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;footer&quot;&gt;&#10;        &lt;p&gt;&amp;copy; 2025 Banco ADA - Todos os direitos reservados&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;js/cadastro.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;pt-br&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Cadastro - Banco ADA&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css&quot;&gt;&#10;    &lt;style&gt;&#10;        body {&#10;            background: linear-gradient(135deg, #0033a0 0%, #0066cc 100%);&#10;            color: white;&#10;            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;&#10;            min-height: 100vh;&#10;            margin: 0;&#10;            padding: 20px 0 50px 0;&#10;        }&#10;        .background-pattern {&#10;            position: fixed;&#10;            top: 0;&#10;            left: 0;&#10;            width: 100%;&#10;            height: 100%;&#10;            background-image: url('data:image/svg+xml;utf8,&lt;svg width=&quot;100&quot; height=&quot;100&quot; viewBox=&quot;0 0 100 100&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path fill=&quot;%230055b3&quot; fill-opacity=&quot;0.1&quot; d=&quot;M50 0 L100 50 L50 100 L0 50 Z&quot; /&gt;&lt;/svg&gt;');&#10;            background-size: 200px 200px;&#10;            z-index: -1;&#10;        }&#10;        .header {&#10;            padding: 20px 0;&#10;            margin-bottom: 20px;&#10;            text-align: center;&#10;        }&#10;        .logo {&#10;            font-size: 40px;&#10;            font-weight: bold;&#10;            color: white;&#10;            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);&#10;            margin-bottom: 10px;&#10;        }&#10;        .container {&#10;            max-width: 850px;&#10;            margin: 0 auto 30px auto;&#10;            background-color: rgba(255, 255, 255, 0.95);&#10;            padding: 30px;&#10;            border-radius: 15px;&#10;            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);&#10;            color: #333;&#10;        }&#10;        .form-group {&#10;            margin-bottom: 20px;&#10;        }&#10;        .form-label {&#10;            font-weight: 600;&#10;            margin-bottom: 8px;&#10;            color: #0033a0;&#10;        }&#10;        .form-control {&#10;            border: 1px solid #ced4da;&#10;            padding: 12px;&#10;            border-radius: 8px;&#10;            transition: all 0.3s;&#10;        }&#10;        .form-control:focus {&#10;            border-color: #0033a0;&#10;            box-shadow: 0 0 0 0.25rem rgba(0, 51, 160, 0.25);&#10;        }&#10;        .section-title {&#10;            margin-top: 25px;&#10;            margin-bottom: 15px;&#10;            padding-bottom: 10px;&#10;            border-bottom: 2px solid #0033a0;&#10;            color: #0033a0;&#10;            font-weight: 600;&#10;            display: flex;&#10;            align-items: center;&#10;        }&#10;        .section-title i {&#10;            margin-right: 10px;&#10;            font-size: 1.2em;&#10;        }&#10;        .btn-success {&#10;            background-color: #28a745;&#10;            border-color: #28a745;&#10;            padding: 12px 30px;&#10;            font-weight: 600;&#10;            transition: all 0.3s;&#10;        }&#10;        .btn-success:hover {&#10;            background-color: #218838;&#10;            transform: translateY(-3px);&#10;            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);&#10;        }&#10;        .btn-secondary {&#10;            background-color: #6c757d;&#10;            border-color: #6c757d;&#10;            padding: 12px 30px;&#10;            font-weight: 600;&#10;            transition: all 0.3s;&#10;        }&#10;        .btn-secondary:hover {&#10;            background-color: #5a6268;&#10;            transform: translateY(-3px);&#10;            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);&#10;        }&#10;        .alert {&#10;            display: none;&#10;            margin-top: 20px;&#10;            padding: 15px;&#10;            border-radius: 8px;&#10;        }&#10;        .footer {&#10;            text-align: center;&#10;            margin-top: 30px;&#10;            color: rgba(255, 255, 255, 0.7);&#10;            font-size: 14px;&#10;        }&#10;        .card-badge {&#10;            position: absolute;&#10;            top: 15px;&#10;            right: 15px;&#10;            display: flex;&#10;            align-items: center;&#10;            background-color: rgba(0, 51, 160, 0.1);&#10;            padding: 10px 15px;&#10;            border-radius: 8px;&#10;            color: #0033a0;&#10;        }&#10;        .card-badge i {&#10;            font-size: 24px;&#10;            margin-right: 10px;&#10;        }&#10;        .secure-info {&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            margin-top: 20px;&#10;            color: #6c757d;&#10;            font-size: 14px;&#10;            background-color: rgba(0, 51, 160, 0.05);&#10;            padding: 10px;&#10;            border-radius: 8px;&#10;        }&#10;        .secure-info i {&#10;            margin-right: 8px;&#10;            color: #28a745;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;background-pattern&quot;&gt;&lt;/div&gt;&#10;&#10;    &lt;div class=&quot;header&quot;&gt;&#10;        &lt;a href=&quot;index.html&quot; class=&quot;text-decoration-none&quot;&gt;&#10;            &lt;div class=&quot;logo&quot;&gt;&#10;                &lt;i class=&quot;fas fa-landmark me-2&quot;&gt;&lt;/i&gt; Banco ADA&#10;            &lt;/div&gt;&#10;        &lt;/a&gt;&#10;        &lt;p&gt;Crie sua conta bancária e comece a investir no seu futuro&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;container position-relative&quot;&gt;&#10;        &lt;div class=&quot;card-badge&quot;&gt;&#10;            &lt;i class=&quot;fas fa-university&quot;&gt;&lt;/i&gt;&#10;            &lt;span&gt;Abra sua conta&lt;br&gt;100% digital&lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;h2 class=&quot;text-center mb-4&quot;&gt;Cadastro de Cliente&lt;/h2&gt;&#10;&#10;        &lt;form id=&quot;cadastroForm&quot;&gt;&#10;            &lt;!-- Dados Pessoais --&gt;&#10;            &lt;h5 class=&quot;section-title&quot;&gt;&#10;                &lt;i class=&quot;fas fa-user&quot;&gt;&lt;/i&gt; Dados Pessoais&#10;            &lt;/h5&gt;&#10;            &lt;div class=&quot;row&quot;&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;nome&quot; class=&quot;form-label&quot;&gt;Nome Completo&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;nome&quot; name=&quot;nome&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;email&quot; class=&quot;form-label&quot;&gt;Email&lt;/label&gt;&#10;                    &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;email&quot; name=&quot;email&quot; required&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;row&quot;&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;cpf&quot; class=&quot;form-label&quot;&gt;CPF&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;cpf&quot; name=&quot;cpf&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;nascimento&quot; class=&quot;form-label&quot;&gt;Data de Nascimento&lt;/label&gt;&#10;                    &lt;input type=&quot;date&quot; class=&quot;form-control&quot; id=&quot;nascimento&quot; name=&quot;nascimento&quot; required&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Senha --&gt;&#10;            &lt;h5 class=&quot;section-title&quot;&gt;&#10;                &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt; Senha de Acesso&#10;            &lt;/h5&gt;&#10;            &lt;div class=&quot;row&quot;&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;senha&quot; class=&quot;form-label&quot;&gt;Senha (mínimo 6 dígitos)&lt;/label&gt;&#10;                    &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;senha&quot; name=&quot;senha&quot; required minlength=&quot;6&quot;&gt;&#10;                    &lt;div class=&quot;invalid-feedback&quot;&gt;&#10;                        A senha deve ter pelo menos 6 dígitos.&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;repetirSenha&quot; class=&quot;form-label&quot;&gt;Repetir Senha&lt;/label&gt;&#10;                    &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;repetirSenha&quot; name=&quot;repetirSenha&quot; required minlength=&quot;6&quot;&gt;&#10;                    &lt;div class=&quot;invalid-feedback&quot;&gt;&#10;                        As senhas devem coincidir.&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Endereço --&gt;&#10;            &lt;h5 class=&quot;section-title&quot;&gt;&#10;                &lt;i class=&quot;fas fa-home&quot;&gt;&lt;/i&gt; Endereço&#10;            &lt;/h5&gt;&#10;            &lt;div class=&quot;row&quot;&gt;&#10;                &lt;div class=&quot;col-md-8 form-group&quot;&gt;&#10;                    &lt;label for=&quot;rua&quot; class=&quot;form-label&quot;&gt;Rua&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;rua&quot; name=&quot;rua&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-4 form-group&quot;&gt;&#10;                    &lt;label for=&quot;numero&quot; class=&quot;form-label&quot;&gt;Número&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;numero&quot; name=&quot;numero&quot; required&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;row&quot;&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;complemento&quot; class=&quot;form-label&quot;&gt;Complemento&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;complemento&quot; name=&quot;complemento&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;bairro&quot; class=&quot;form-label&quot;&gt;Bairro&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;bairro&quot; name=&quot;bairro&quot; required&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;row&quot;&gt;&#10;                &lt;div class=&quot;col-md-6 form-group&quot;&gt;&#10;                    &lt;label for=&quot;cidade&quot; class=&quot;form-label&quot;&gt;Cidade&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;cidade&quot; name=&quot;cidade&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-3 form-group&quot;&gt;&#10;                    &lt;label for=&quot;estado&quot; class=&quot;form-label&quot;&gt;Estado&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;estado&quot; name=&quot;estado&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-3 form-group&quot;&gt;&#10;                    &lt;label for=&quot;cep&quot; class=&quot;form-label&quot;&gt;CEP&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;cep&quot; name=&quot;cep&quot; required&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Telefone --&gt;&#10;            &lt;h5 class=&quot;section-title&quot;&gt;&#10;                &lt;i class=&quot;fas fa-phone&quot;&gt;&lt;/i&gt; Telefone&#10;            &lt;/h5&gt;&#10;            &lt;div class=&quot;row&quot;&gt;&#10;                &lt;div class=&quot;col-md-4 form-group&quot;&gt;&#10;                    &lt;label for=&quot;codigoPais&quot; class=&quot;form-label&quot;&gt;Código do País&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;codigoPais&quot; name=&quot;codigoPais&quot; placeholder=&quot;+55&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-4 form-group&quot;&gt;&#10;                    &lt;label for=&quot;ddd&quot; class=&quot;form-label&quot;&gt;DDD&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;ddd&quot; name=&quot;ddd&quot; required&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-4 form-group&quot;&gt;&#10;                    &lt;label for=&quot;telefone&quot; class=&quot;form-label&quot;&gt;Número&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;telefone&quot; name=&quot;telefone&quot; required&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;text-center mt-4&quot;&gt;&#10;                &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-check-circle me-2&quot;&gt;&lt;/i&gt;Cadastrar&#10;                &lt;/button&gt;&#10;                &lt;a href=&quot;index.html&quot; class=&quot;btn btn-secondary ms-2&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-arrow-left me-2&quot;&gt;&lt;/i&gt;Voltar&#10;                &lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/form&gt;&#10;&#10;        &lt;div class=&quot;alert alert-danger mt-3&quot; id=&quot;errorAlert&quot;&gt;&lt;/div&gt;&#10;        &lt;div class=&quot;alert alert-success mt-3&quot; id=&quot;successAlert&quot;&gt;&lt;/div&gt;&#10;&#10;        &lt;div class=&quot;secure-info&quot;&gt;&#10;            &lt;i class=&quot;fas fa-shield-alt&quot;&gt;&lt;/i&gt;&#10;            Seus dados estão protegidos com o mais alto padrão de segurança. Ao se cadastrar, você concorda com nossa política de privacidade.&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;footer&quot;&gt;&#10;        &lt;p&gt;&amp;copy; 2025 Banco ADA - Todos os direitos reservados&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;js/cadastro.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/static/dashboard.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/static/dashboard.html" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;pt-br&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Dashboard - Banco ADA&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css&quot;&gt;&#10;    &lt;style&gt;&#10;        body {&#10;            background: linear-gradient(135deg, #0033a0 0%, #0066cc 100%);&#10;            color: white;&#10;            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;&#10;            min-height: 100vh;&#10;            margin: 0;&#10;        }&#10;        .background-pattern {&#10;            position: fixed;&#10;            top: 0;&#10;            left: 0;&#10;            width: 100%;&#10;            height: 100%;&#10;            background-image: url('data:image/svg+xml;utf8,&lt;svg width=&quot;100&quot; height=&quot;100&quot; viewBox=&quot;0 0 100 100&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path fill=&quot;%230055b3&quot; fill-opacity=&quot;0.1&quot; d=&quot;M50 0 L100 50 L50 100 L0 50 Z&quot; /&gt;&lt;/svg&gt;');&#10;            background-size: 200px 200px;&#10;            z-index: -1;&#10;        }&#10;        .navbar {&#10;            background-color: rgba(255, 255, 255, 0.95);&#10;            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);&#10;            padding: 15px 0;&#10;        }&#10;        .navbar-brand {&#10;            color: #0033a0 !important;&#10;            font-weight: bold;&#10;            font-size: 24px;&#10;        }&#10;        .container-main {&#10;            max-width: 1200px;&#10;            margin: 30px auto;&#10;            padding: 0 20px;&#10;        }&#10;        .card {&#10;            background-color: rgba(255, 255, 255, 0.95);&#10;            border: none;&#10;            border-radius: 15px;&#10;            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);&#10;            margin-bottom: 30px;&#10;            color: #333;&#10;        }&#10;        .card-header {&#10;            background-color: #0033a0;&#10;            color: white;&#10;            border-radius: 15px 15px 0 0 !important;&#10;            padding: 20px;&#10;            font-weight: bold;&#10;        }&#10;        .balance-card {&#10;            background: linear-gradient(135deg, #28a745, #20c997);&#10;            color: white;&#10;        }&#10;        .balance-amount {&#10;            font-size: 2.5em;&#10;            font-weight: bold;&#10;            margin: 20px 0;&#10;        }&#10;        .account-number {&#10;            font-size: 1.2em;&#10;            margin-bottom: 10px;&#10;        }&#10;        .btn-banking {&#10;            background-color: #0033a0;&#10;            border-color: #0033a0;&#10;            color: white;&#10;            padding: 12px 25px;&#10;            margin: 5px;&#10;            border-radius: 8px;&#10;            transition: all 0.3s;&#10;        }&#10;        .btn-banking:hover {&#10;            background-color: #00288f;&#10;            transform: translateY(-2px);&#10;            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);&#10;        }&#10;        .transaction-item {&#10;            border-bottom: 1px solid #eee;&#10;            padding: 15px;&#10;            display: flex;&#10;            justify-content: space-between;&#10;            align-items: center;&#10;        }&#10;        .transaction-item:last-child {&#10;            border-bottom: none;&#10;        }&#10;        .transaction-icon {&#10;            width: 40px;&#10;            height: 40px;&#10;            border-radius: 50%;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            margin-right: 15px;&#10;        }&#10;        .transaction-in {&#10;            background-color: #d4edda;&#10;            color: #155724;&#10;        }&#10;        .transaction-out {&#10;            background-color: #f8d7da;&#10;            color: #721c24;&#10;        }&#10;        .quick-actions {&#10;            display: grid;&#10;            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));&#10;            gap: 20px;&#10;            margin-bottom: 30px;&#10;        }&#10;        .action-card {&#10;            background: rgba(255, 255, 255, 0.95);&#10;            border-radius: 15px;&#10;            padding: 25px;&#10;            text-align: center;&#10;            color: #333;&#10;            text-decoration: none;&#10;            transition: all 0.3s;&#10;            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);&#10;        }&#10;        .action-card:hover {&#10;            transform: translateY(-5px);&#10;            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);&#10;            text-decoration: none;&#10;            color: #0033a0;&#10;        }&#10;        .action-icon {&#10;            font-size: 3em;&#10;            margin-bottom: 15px;&#10;            color: #0033a0;&#10;        }&#10;        .user-info {&#10;            display: flex;&#10;            align-items: center;&#10;            color: #0033a0;&#10;        }&#10;        .modal-header {&#10;            background-color: #0033a0;&#10;            color: white;&#10;        }&#10;        .alert {&#10;            display: none;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;background-pattern&quot;&gt;&lt;/div&gt;&#10;&#10;    &lt;!-- Navbar --&gt;&#10;    &lt;nav class=&quot;navbar navbar-expand-lg&quot;&gt;&#10;        &lt;div class=&quot;container&quot;&gt;&#10;            &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;&#10;                &lt;i class=&quot;fas fa-landmark me-2&quot;&gt;&lt;/i&gt;Banco ADA&#10;            &lt;/a&gt;&#10;            &lt;div class=&quot;user-info ms-auto&quot;&gt;&#10;                &lt;span id=&quot;userName&quot; class=&quot;me-3&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-user-circle me-2&quot;&gt;&lt;/i&gt;Bem-vindo!&#10;                &lt;/span&gt;&#10;                &lt;button class=&quot;btn btn-outline-danger&quot; onclick=&quot;logout()&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-sign-out-alt me-2&quot;&gt;&lt;/i&gt;Sair&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;&#10;    &lt;!-- Main Content --&gt;&#10;    &lt;div class=&quot;container-main&quot;&gt;&#10;        &lt;!-- Saldo e Informações da Conta --&gt;&#10;        &lt;div class=&quot;card balance-card&quot;&gt;&#10;            &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                &lt;h5&gt;Sua Conta&lt;/h5&gt;&#10;                &lt;div class=&quot;account-number&quot;&gt;&#10;                    Conta: &lt;span id=&quot;accountNumber&quot;&gt;Carregando...&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;balance-amount&quot;&gt;&#10;                    R$ &lt;span id=&quot;balance&quot;&gt;0,00&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;p&gt;Saldo disponível&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Ações Rápidas --&gt;&#10;        &lt;div class=&quot;quick-actions&quot;&gt;&#10;            &lt;a href=&quot;#&quot; class=&quot;action-card&quot; data-bs-toggle=&quot;modal&quot; data-bs-target=&quot;#transferModal&quot;&gt;&#10;                &lt;div class=&quot;action-icon&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-exchange-alt&quot;&gt;&lt;/i&gt;&#10;                &lt;/div&gt;&#10;                &lt;h6&gt;Transferir&lt;/h6&gt;&#10;                &lt;p&gt;Envie dinheiro para outras contas&lt;/p&gt;&#10;            &lt;/a&gt;&#10;&#10;            &lt;a href=&quot;#&quot; class=&quot;action-card&quot; data-bs-toggle=&quot;modal&quot; data-bs-target=&quot;#depositModal&quot;&gt;&#10;                &lt;div class=&quot;action-icon&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-plus-circle&quot;&gt;&lt;/i&gt;&#10;                &lt;/div&gt;&#10;                &lt;h6&gt;Depositar&lt;/h6&gt;&#10;                &lt;p&gt;Adicione dinheiro à sua conta&lt;/p&gt;&#10;            &lt;/a&gt;&#10;&#10;            &lt;a href=&quot;#&quot; class=&quot;action-card&quot; data-bs-toggle=&quot;modal&quot; data-bs-target=&quot;#withdrawModal&quot;&gt;&#10;                &lt;div class=&quot;action-icon&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-minus-circle&quot;&gt;&lt;/i&gt;&#10;                &lt;/div&gt;&#10;                &lt;h6&gt;Sacar&lt;/h6&gt;&#10;                &lt;p&gt;Retire dinheiro da sua conta&lt;/p&gt;&#10;            &lt;/a&gt;&#10;&#10;            &lt;a href=&quot;#&quot; class=&quot;action-card&quot; onclick=&quot;showStatement()&quot;&gt;&#10;                &lt;div class=&quot;action-icon&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-file-alt&quot;&gt;&lt;/i&gt;&#10;                &lt;/div&gt;&#10;                &lt;h6&gt;Extrato&lt;/h6&gt;&#10;                &lt;p&gt;Veja suas movimentações&lt;/p&gt;&#10;            &lt;/a&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Últimas Transações --&gt;&#10;        &lt;div class=&quot;card&quot;&gt;&#10;            &lt;div class=&quot;card-header&quot;&gt;&#10;                &lt;i class=&quot;fas fa-history me-2&quot;&gt;&lt;/i&gt;Últimas Transações&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card-body&quot; id=&quot;transactionsList&quot;&gt;&#10;                &lt;p class=&quot;text-center text-muted&quot;&gt;Nenhuma transação encontrada&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Modal de Transferência --&gt;&#10;    &lt;div class=&quot;modal fade&quot; id=&quot;transferModal&quot; tabindex=&quot;-1&quot;&gt;&#10;        &lt;div class=&quot;modal-dialog&quot;&gt;&#10;            &lt;div class=&quot;modal-content&quot;&gt;&#10;                &lt;div class=&quot;modal-header&quot;&gt;&#10;                    &lt;h5 class=&quot;modal-title&quot;&gt;Transferir Dinheiro&lt;/h5&gt;&#10;                    &lt;button type=&quot;button&quot; class=&quot;btn-close btn-close-white&quot; data-bs-dismiss=&quot;modal&quot;&gt;&lt;/button&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;modal-body&quot;&gt;&#10;                    &lt;form id=&quot;transferForm&quot;&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;destinationAccount&quot; class=&quot;form-label&quot;&gt;Conta de Destino&lt;/label&gt;&#10;                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;destinationAccount&quot; required&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;transferAmount&quot; class=&quot;form-label&quot;&gt;Valor&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;transferAmount&quot; step=&quot;0.01&quot; min=&quot;0.01&quot; required&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;transferDescription&quot; class=&quot;form-label&quot;&gt;Descrição (opcional)&lt;/label&gt;&#10;                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;transferDescription&quot;&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/form&gt;&#10;                    &lt;div class=&quot;alert alert-danger&quot; id=&quot;transferError&quot;&gt;&lt;/div&gt;&#10;                    &lt;div class=&quot;alert alert-success&quot; id=&quot;transferSuccess&quot;&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;modal-footer&quot;&gt;&#10;                    &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-bs-dismiss=&quot;modal&quot;&gt;Cancelar&lt;/button&gt;&#10;                    &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;processTransfer()&quot;&gt;Confirmar Transferência&lt;/button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Modal de Depósito --&gt;&#10;    &lt;div class=&quot;modal fade&quot; id=&quot;depositModal&quot; tabindex=&quot;-1&quot;&gt;&#10;        &lt;div class=&quot;modal-dialog&quot;&gt;&#10;            &lt;div class=&quot;modal-content&quot;&gt;&#10;                &lt;div class=&quot;modal-header&quot;&gt;&#10;                    &lt;h5 class=&quot;modal-title&quot;&gt;Depositar Dinheiro&lt;/h5&gt;&#10;                    &lt;button type=&quot;button&quot; class=&quot;btn-close btn-close-white&quot; data-bs-dismiss=&quot;modal&quot;&gt;&lt;/button&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;modal-body&quot;&gt;&#10;                    &lt;form id=&quot;depositForm&quot;&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;depositAmount&quot; class=&quot;form-label&quot;&gt;Valor&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;depositAmount&quot; step=&quot;0.01&quot; min=&quot;0.01&quot; required&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;depositDescription&quot; class=&quot;form-label&quot;&gt;Descrição (opcional)&lt;/label&gt;&#10;                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;depositDescription&quot; placeholder=&quot;Ex: Depósito via PIX&quot;&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/form&gt;&#10;                    &lt;div class=&quot;alert alert-danger&quot; id=&quot;depositError&quot;&gt;&lt;/div&gt;&#10;                    &lt;div class=&quot;alert alert-success&quot; id=&quot;depositSuccess&quot;&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;modal-footer&quot;&gt;&#10;                    &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-bs-dismiss=&quot;modal&quot;&gt;Cancelar&lt;/button&gt;&#10;                    &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;processDeposit()&quot;&gt;Confirmar Depósito&lt;/button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Modal de Saque --&gt;&#10;    &lt;div class=&quot;modal fade&quot; id=&quot;withdrawModal&quot; tabindex=&quot;-1&quot;&gt;&#10;        &lt;div class=&quot;modal-dialog&quot;&gt;&#10;            &lt;div class=&quot;modal-content&quot;&gt;&#10;                &lt;div class=&quot;modal-header&quot;&gt;&#10;                    &lt;h5 class=&quot;modal-title&quot;&gt;Sacar Dinheiro&lt;/h5&gt;&#10;                    &lt;button type=&quot;button&quot; class=&quot;btn-close btn-close-white&quot; data-bs-dismiss=&quot;modal&quot;&gt;&lt;/button&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;modal-body&quot;&gt;&#10;                    &lt;form id=&quot;withdrawForm&quot;&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;withdrawAmount&quot; class=&quot;form-label&quot;&gt;Valor&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;withdrawAmount&quot; step=&quot;0.01&quot; min=&quot;0.01&quot; required&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;withdrawDescription&quot; class=&quot;form-label&quot;&gt;Descrição (opcional)&lt;/label&gt;&#10;                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;withdrawDescription&quot; placeholder=&quot;Ex: Saque no ATM&quot;&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/form&gt;&#10;                    &lt;div class=&quot;alert alert-danger&quot; id=&quot;withdrawError&quot;&gt;&lt;/div&gt;&#10;                    &lt;div class=&quot;alert alert-success&quot; id=&quot;withdrawSuccess&quot;&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;modal-footer&quot;&gt;&#10;                    &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-bs-dismiss=&quot;modal&quot;&gt;Cancelar&lt;/button&gt;&#10;                    &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;processWithdraw()&quot;&gt;Confirmar Saque&lt;/button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;js/dashboard.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/static/js/cadastro.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/static/js/cadastro.js" />
              <option name="originalContent" value="document.addEventListener('DOMContentLoaded', function() {&#10;    const form = document.getElementById('cadastroForm');&#10;    const errorAlert = document.getElementById('errorAlert');&#10;    const successAlert = document.getElementById('successAlert');&#10;&#10;    form.addEventListener('submit', function(event) {&#10;        event.preventDefault();&#10;&#10;        // Limpar alertas anteriores&#10;        errorAlert.style.display = 'none';&#10;        successAlert.style.display = 'none';&#10;&#10;        // Coletar dados do formulário&#10;        const clientData = {&#10;            name: document.getElementById('nome').value,&#10;            email: document.getElementById('email').value,&#10;            cpf: document.getElementById('cpf').value,&#10;            birthDate: document.getElementById('nascimento').value,&#10;            address: {&#10;                street: document.getElementById('rua').value,&#10;                number: document.getElementById('numero').value,&#10;                complement: document.getElementById('complemento').value,&#10;                neighborhood: document.getElementById('bairro').value,&#10;                city: document.getElementById('cidade').value,&#10;                state: document.getElementById('estado').value,&#10;                zipCode: document.getElementById('cep').value&#10;            },&#10;            phone: {&#10;                countryCode: document.getElementById('codigoPais').value.replace('+', ''),&#10;                areaCode: document.getElementById('ddd').value,&#10;                numberCode: document.getElementById('telefone').value&#10;            },&#10;            isActive: true&#10;        };&#10;&#10;        // Enviar para a API&#10;        fetch('/api/clients', {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify(clientData)&#10;        })&#10;        .then(response =&gt; {&#10;            if (!response.ok) {&#10;                throw new Error('Erro ao cadastrar cliente');&#10;            }&#10;            return response.json();&#10;        })&#10;        .then(data =&gt; {&#10;            // Exibir mensagem de sucesso&#10;            successAlert.textContent = 'Cliente cadastrado com sucesso! Conta criada com número: ' +&#10;                                     (data.account ? data.account.accountNumber : 'Indisponível');&#10;            successAlert.style.display = 'block';&#10;&#10;            // Limpar formulário&#10;            form.reset();&#10;&#10;            // Redirecionar após 2 segundos&#10;            setTimeout(() =&gt; {&#10;                window.location.href = 'index.html';&#10;            }, 2000);&#10;        })&#10;        .catch(error =&gt; {&#10;            // Exibir mensagem de erro&#10;            errorAlert.textContent = error.message || 'Ocorreu um erro ao processar sua solicitação';&#10;            errorAlert.style.display = 'block';&#10;        });&#10;    });&#10;});&#10;" />
              <option name="updatedContent" value="document.addEventListener('DOMContentLoaded', function() {&#10;    const form = document.getElementById('cadastroForm');&#10;    const errorAlert = document.getElementById('errorAlert');&#10;    const successAlert = document.getElementById('successAlert');&#10;&#10;    // Validação em tempo real da senha&#10;    const senha = document.getElementById('senha');&#10;    const repetirSenha = document.getElementById('repetirSenha');&#10;&#10;    function validarSenhas() {&#10;        if (senha.value.length &gt; 0 &amp;&amp; senha.value.length &lt; 6) {&#10;            senha.classList.add('is-invalid');&#10;        } else {&#10;            senha.classList.remove('is-invalid');&#10;        }&#10;&#10;        if (repetirSenha.value.length &gt; 0 &amp;&amp; senha.value !== repetirSenha.value) {&#10;            repetirSenha.classList.add('is-invalid');&#10;        } else {&#10;            repetirSenha.classList.remove('is-invalid');&#10;        }&#10;    }&#10;&#10;    senha.addEventListener('input', validarSenhas);&#10;    repetirSenha.addEventListener('input', validarSenhas);&#10;&#10;    form.addEventListener('submit', function(event) {&#10;        event.preventDefault();&#10;&#10;        // Limpar alertas anteriores&#10;        errorAlert.style.display = 'none';&#10;        successAlert.style.display = 'none';&#10;&#10;        // Validação de senha&#10;        const senhaValue = senha.value;&#10;        const repetirSenhaValue = repetirSenha.value;&#10;&#10;        if (senhaValue.length &lt; 6) {&#10;            errorAlert.textContent = 'A senha deve ter no mínimo 6 dígitos.';&#10;            errorAlert.style.display = 'block';&#10;            return;&#10;        }&#10;&#10;        if (senhaValue !== repetirSenhaValue) {&#10;            errorAlert.textContent = 'As senhas não coincidem.';&#10;            errorAlert.style.display = 'block';&#10;            return;&#10;        }&#10;&#10;        // Coletar dados do formulário&#10;        const clientData = {&#10;            name: document.getElementById('nome').value,&#10;            email: document.getElementById('email').value,&#10;            cpf: document.getElementById('cpf').value,&#10;            birthDate: document.getElementById('nascimento').value,&#10;            address: {&#10;                street: document.getElementById('rua').value,&#10;                number: document.getElementById('numero').value,&#10;                complement: document.getElementById('complemento').value,&#10;                neighborhood: document.getElementById('bairro').value,&#10;                city: document.getElementById('cidade').value,&#10;                state: document.getElementById('estado').value,&#10;                zipCode: document.getElementById('cep').value&#10;            },&#10;            phone: {&#10;                countryCode: document.getElementById('codigoPais').value.replace('+', ''),&#10;                areaCode: document.getElementById('ddd').value,&#10;                numberCode: document.getElementById('telefone').value&#10;            },&#10;            password: senhaValue,&#10;            isActive: true&#10;        };&#10;&#10;        // Enviar dados para o servidor&#10;        fetch('/api/clients', {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json'&#10;            },&#10;            body: JSON.stringify(clientData)&#10;        })&#10;        .then(response =&gt; {&#10;            if (!response.ok) {&#10;                return response.text().then(text =&gt; {&#10;                    throw new Error(text);&#10;                });&#10;            }&#10;            return response.json();&#10;        })&#10;        .then(data =&gt; {&#10;            successAlert.innerHTML = `&#10;                &lt;strong&gt;Cadastro realizado com sucesso!&lt;/strong&gt;&lt;br&gt;&#10;                Conta criada: ${data.account.accountNumber}&lt;br&gt;&#10;                &lt;a href=&quot;login.html&quot; class=&quot;btn btn-primary mt-2&quot;&gt;Fazer Login&lt;/a&gt;&#10;            `;&#10;            successAlert.style.display = 'block';&#10;            form.reset();&#10;        })&#10;        .catch(error =&gt; {&#10;            errorAlert.textContent = error.message;&#10;            errorAlert.style.display = 'block';&#10;        });&#10;    });&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/static/js/dashboard.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/static/js/dashboard.js" />
              <option name="updatedContent" value="document.addEventListener('DOMContentLoaded', function() {&#10;    // Verificar se o usuário está logado&#10;    const userData = localStorage.getItem('userData');&#10;    if (!userData) {&#10;        window.location.href = 'login.html';&#10;        return;&#10;    }&#10;&#10;    const user = JSON.parse(userData);&#10;    loadUserData(user);&#10;    loadTransactions();&#10;});&#10;&#10;function loadUserData(user) {&#10;    // Atualizar informações do usuário na tela&#10;    document.getElementById('userName').innerHTML = `&#10;        &lt;i class=&quot;fas fa-user-circle me-2&quot;&gt;&lt;/i&gt;Olá, ${user.name}!&#10;    `;&#10;    &#10;    if (user.account) {&#10;        document.getElementById('accountNumber').textContent = user.account.accountNumber;&#10;        document.getElementById('balance').textContent = formatCurrency(user.account.balance);&#10;    }&#10;}&#10;&#10;function formatCurrency(value) {&#10;    return new Intl.NumberFormat('pt-BR', {&#10;        minimumFractionDigits: 2,&#10;        maximumFractionDigits: 2&#10;    }).format(value);&#10;}&#10;&#10;function logout() {&#10;    localStorage.removeItem('userData');&#10;    localStorage.removeItem('userEmail');&#10;    window.location.href = 'login.html';&#10;}&#10;&#10;function processDeposit() {&#10;    const amount = parseFloat(document.getElementById('depositAmount').value);&#10;    const description = document.getElementById('depositDescription').value || 'Depósito';&#10;    &#10;    const errorDiv = document.getElementById('depositError');&#10;    const successDiv = document.getElementById('depositSuccess');&#10;    &#10;    errorDiv.style.display = 'none';&#10;    successDiv.style.display = 'none';&#10;&#10;    if (!amount || amount &lt;= 0) {&#10;        errorDiv.textContent = 'Valor inválido para depósito.';&#10;        errorDiv.style.display = 'block';&#10;        return;&#10;    }&#10;&#10;    const userData = JSON.parse(localStorage.getItem('userData'));&#10;    const depositData = {&#10;        accountId: userData.account.id,&#10;        amount: amount,&#10;        type: 'DEPOSIT',&#10;        description: description&#10;    };&#10;&#10;    fetch('/api/transactions', {&#10;        method: 'POST',&#10;        headers: {&#10;            'Content-Type': 'application/json'&#10;        },&#10;        body: JSON.stringify(depositData)&#10;    })&#10;    .then(response =&gt; {&#10;        if (response.ok) {&#10;            return response.json();&#10;        }&#10;        throw new Error('Erro ao processar depósito');&#10;    })&#10;    .then(data =&gt; {&#10;        successDiv.textContent = 'Depósito realizado com sucesso!';&#10;        successDiv.style.display = 'block';&#10;        &#10;        // Atualizar saldo&#10;        updateBalance(amount, 'add');&#10;        &#10;        // Fechar modal após 2 segundos&#10;        setTimeout(() =&gt; {&#10;            bootstrap.Modal.getInstance(document.getElementById('depositModal')).hide();&#10;            document.getElementById('depositForm').reset();&#10;            loadTransactions();&#10;        }, 2000);&#10;    })&#10;    .catch(error =&gt; {&#10;        errorDiv.textContent = error.message;&#10;        errorDiv.style.display = 'block';&#10;    });&#10;}&#10;&#10;function processWithdraw() {&#10;    const amount = parseFloat(document.getElementById('withdrawAmount').value);&#10;    const description = document.getElementById('withdrawDescription').value || 'Saque';&#10;    &#10;    const errorDiv = document.getElementById('withdrawError');&#10;    const successDiv = document.getElementById('withdrawSuccess');&#10;    &#10;    errorDiv.style.display = 'none';&#10;    successDiv.style.display = 'none';&#10;&#10;    if (!amount || amount &lt;= 0) {&#10;        errorDiv.textContent = 'Valor inválido para saque.';&#10;        errorDiv.style.display = 'block';&#10;        return;&#10;    }&#10;&#10;    const userData = JSON.parse(localStorage.getItem('userData'));&#10;    const currentBalance = parseFloat(document.getElementById('balance').textContent.replace(/\./g, '').replace(',', '.'));&#10;    &#10;    if (amount &gt; currentBalance) {&#10;        errorDiv.textContent = 'Saldo insuficiente para esta operação.';&#10;        errorDiv.style.display = 'block';&#10;        return;&#10;    }&#10;&#10;    const withdrawData = {&#10;        accountId: userData.account.id,&#10;        amount: amount,&#10;        type: 'WITHDRAWAL',&#10;        description: description&#10;    };&#10;&#10;    fetch('/api/transactions', {&#10;        method: 'POST',&#10;        headers: {&#10;            'Content-Type': 'application/json'&#10;        },&#10;        body: JSON.stringify(withdrawData)&#10;    })&#10;    .then(response =&gt; {&#10;        if (response.ok) {&#10;            return response.json();&#10;        }&#10;        throw new Error('Erro ao processar saque');&#10;    })&#10;    .then(data =&gt; {&#10;        successDiv.textContent = 'Saque realizado com sucesso!';&#10;        successDiv.style.display = 'block';&#10;        &#10;        // Atualizar saldo&#10;        updateBalance(amount, 'subtract');&#10;        &#10;        // Fechar modal após 2 segundos&#10;        setTimeout(() =&gt; {&#10;            bootstrap.Modal.getInstance(document.getElementById('withdrawModal')).hide();&#10;            document.getElementById('withdrawForm').reset();&#10;            loadTransactions();&#10;        }, 2000);&#10;    })&#10;    .catch(error =&gt; {&#10;        errorDiv.textContent = error.message;&#10;        errorDiv.style.display = 'block';&#10;    });&#10;}&#10;&#10;function processTransfer() {&#10;    const destinationAccount = document.getElementById('destinationAccount').value;&#10;    const amount = parseFloat(document.getElementById('transferAmount').value);&#10;    const description = document.getElementById('transferDescription').value || 'Transferência';&#10;    &#10;    const errorDiv = document.getElementById('transferError');&#10;    const successDiv = document.getElementById('transferSuccess');&#10;    &#10;    errorDiv.style.display = 'none';&#10;    successDiv.style.display = 'none';&#10;&#10;    if (!destinationAccount) {&#10;        errorDiv.textContent = 'Conta de destino é obrigatória.';&#10;        errorDiv.style.display = 'block';&#10;        return;&#10;    }&#10;&#10;    if (!amount || amount &lt;= 0) {&#10;        errorDiv.textContent = 'Valor inválido para transferência.';&#10;        errorDiv.style.display = 'block';&#10;        return;&#10;    }&#10;&#10;    const userData = JSON.parse(localStorage.getItem('userData'));&#10;    const currentBalance = parseFloat(document.getElementById('balance').textContent.replace(/\./g, '').replace(',', '.'));&#10;    &#10;    if (amount &gt; currentBalance) {&#10;        errorDiv.textContent = 'Saldo insuficiente para esta operação.';&#10;        errorDiv.style.display = 'block';&#10;        return;&#10;    }&#10;&#10;    const transferData = {&#10;        fromAccountId: userData.account.id,&#10;        toAccountNumber: destinationAccount,&#10;        amount: amount,&#10;        description: description&#10;    };&#10;&#10;    fetch('/api/transfers', {&#10;        method: 'POST',&#10;        headers: {&#10;            'Content-Type': 'application/json'&#10;        },&#10;        body: JSON.stringify(transferData)&#10;    })&#10;    .then(response =&gt; {&#10;        if (response.ok) {&#10;            return response.json();&#10;        }&#10;        return response.text().then(text =&gt; {&#10;            throw new Error(text || 'Erro ao processar transferência');&#10;        });&#10;    })&#10;    .then(data =&gt; {&#10;        successDiv.textContent = 'Transferência realizada com sucesso!';&#10;        successDiv.style.display = 'block';&#10;        &#10;        // Atualizar saldo&#10;        updateBalance(amount, 'subtract');&#10;        &#10;        // Fechar modal após 2 segundos&#10;        setTimeout(() =&gt; {&#10;            bootstrap.Modal.getInstance(document.getElementById('transferModal')).hide();&#10;            document.getElementById('transferForm').reset();&#10;            loadTransactions();&#10;        }, 2000);&#10;    })&#10;    .catch(error =&gt; {&#10;        errorDiv.textContent = error.message;&#10;        errorDiv.style.display = 'block';&#10;    });&#10;}&#10;&#10;function updateBalance(amount, operation) {&#10;    const balanceElement = document.getElementById('balance');&#10;    const currentBalance = parseFloat(balanceElement.textContent.replace(/\./g, '').replace(',', '.'));&#10;    &#10;    let newBalance;&#10;    if (operation === 'add') {&#10;        newBalance = currentBalance + amount;&#10;    } else if (operation === 'subtract') {&#10;        newBalance = currentBalance - amount;&#10;    }&#10;    &#10;    balanceElement.textContent = formatCurrency(newBalance);&#10;    &#10;    // Atualizar também no localStorage&#10;    const userData = JSON.parse(localStorage.getItem('userData'));&#10;    userData.account.balance = newBalance;&#10;    localStorage.setItem('userData', JSON.stringify(userData));&#10;}&#10;&#10;function loadTransactions() {&#10;    const userData = JSON.parse(localStorage.getItem('userData'));&#10;    const transactionsList = document.getElementById('transactionsList');&#10;    &#10;    // Simular transações (em um cenário real, isso viria do backend)&#10;    const mockTransactions = [&#10;        {&#10;            id: 1,&#10;            type: 'DEPOSIT',&#10;            amount: 1000.00,&#10;            description: 'Depósito inicial',&#10;            date: new Date().toISOString(),&#10;            status: 'COMPLETED'&#10;        },&#10;        {&#10;            id: 2,&#10;            type: 'WITHDRAWAL',&#10;            amount: 200.00,&#10;            description: 'Saque no ATM',&#10;            date: new Date(Date.now() - 86400000).toISOString(),&#10;            status: 'COMPLETED'&#10;        }&#10;    ];&#10;    &#10;    if (mockTransactions.length === 0) {&#10;        transactionsList.innerHTML = '&lt;p class=&quot;text-center text-muted&quot;&gt;Nenhuma transação encontrada&lt;/p&gt;';&#10;        return;&#10;    }&#10;    &#10;    transactionsList.innerHTML = mockTransactions.map(transaction =&gt; {&#10;        const isCredit = transaction.type === 'DEPOSIT' || transaction.type === 'TRANSFER_IN';&#10;        const icon = isCredit ? 'fas fa-arrow-up' : 'fas fa-arrow-down';&#10;        const iconClass = isCredit ? 'transaction-in' : 'transaction-out';&#10;        const amountPrefix = isCredit ? '+' : '-';&#10;        &#10;        return `&#10;            &lt;div class=&quot;transaction-item&quot;&gt;&#10;                &lt;div class=&quot;d-flex align-items-center&quot;&gt;&#10;                    &lt;div class=&quot;transaction-icon ${iconClass}&quot;&gt;&#10;                        &lt;i class=&quot;${icon}&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                        &lt;strong&gt;${transaction.description}&lt;/strong&gt;&#10;                        &lt;div class=&quot;text-muted small&quot;&gt;&#10;                            ${new Date(transaction.date).toLocaleDateString('pt-BR')}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;text-end&quot;&gt;&#10;                    &lt;strong class=&quot;${isCredit ? 'text-success' : 'text-danger'}&quot;&gt;&#10;                        ${amountPrefix} R$ ${formatCurrency(transaction.amount)}&#10;                    &lt;/strong&gt;&#10;                    &lt;div class=&quot;text-muted small&quot;&gt;${transaction.status}&lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        `;&#10;    }).join('');&#10;}&#10;&#10;function showStatement() {&#10;    // Em um cenário real, isso abriria uma nova página ou modal com o extrato completo&#10;    alert('Funcionalidade de extrato completo será implementada em breve!');&#10;}&#10;&#10;// Atualizar dados periodicamente (simulação)&#10;setInterval(() =&gt; {&#10;    const userData = localStorage.getItem('userData');&#10;    if (userData) {&#10;        // Em um cenário real, aqui faria uma chamada ao backend para buscar dados atualizados&#10;        loadTransactions();&#10;    }&#10;}, 30000); // Atualiza a cada 30 segundos" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/static/js/login.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/static/js/login.js" />
              <option name="originalContent" value="document.addEventListener('DOMContentLoaded', function() {&#10;    const form = document.getElementById('loginForm');&#10;    const errorAlert = document.getElementById('errorAlert');&#10;    const successAlert = document.getElementById('successAlert');&#10;&#10;    form.addEventListener('submit', function(event) {&#10;        event.preventDefault();&#10;&#10;        // Limpar alertas anteriores&#10;        errorAlert.style.display = 'none';&#10;        successAlert.style.display = 'none';&#10;&#10;        // Coletar dados do formulário&#10;        const email = document.getElementById('email').value;&#10;        const senha = document.getElementById('senha').value;&#10;&#10;        // Validar senha mínima de 6 dígitos&#10;        if (senha.length &lt; 6) {&#10;            errorAlert.textContent = 'A senha deve ter no mínimo 6 dígitos.';&#10;            errorAlert.style.display = 'block';&#10;            return;&#10;        }&#10;&#10;        // Fazer login via API&#10;        const loginData = {&#10;            email: email,&#10;            password: senha&#10;        };&#10;&#10;        fetch('/api/login', {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json'&#10;            },&#10;            body: JSON.stringify(loginData)&#10;        })&#10;        .then(response =&gt; {&#10;            if (response.ok) {&#10;                return response.text();&#10;            } else {&#10;                throw new Error('Email ou senha inválidos.');&#10;            }&#10;        })&#10;        .then(data =&gt; {&#10;            successAlert.textContent = 'Login realizado com sucesso!';&#10;            successAlert.style.display = 'block';&#10;&#10;            // Armazenar dados do usuário no localStorage&#10;            localStorage.setItem('userEmail', email);&#10;&#10;            // Redirecionar para a página bancária após 1 segundo&#10;            setTimeout(() =&gt; {&#10;                window.location.href = 'dashboard.html';&#10;            }, 1000);&#10;        })&#10;        .catch(error =&gt; {&#10;            errorAlert.textContent = error.message;&#10;            errorAlert.style.display = 'block';&#10;        });&#10;    });&#10;});&#10;" />
              <option name="updatedContent" value="document.addEventListener('DOMContentLoaded', function() {&#10;    const form = document.getElementById('loginForm');&#10;    const errorAlert = document.getElementById('errorAlert');&#10;    const successAlert = document.getElementById('successAlert');&#10;    const passwordField = document.getElementById('password');&#10;&#10;    // Validação em tempo real da senha&#10;    passwordField.addEventListener('input', function() {&#10;        if (passwordField.value.length &gt; 0 &amp;&amp; passwordField.value.length &lt; 6) {&#10;            passwordField.classList.add('is-invalid');&#10;        } else {&#10;            passwordField.classList.remove('is-invalid');&#10;        }&#10;    });&#10;&#10;    form.addEventListener('submit', function(event) {&#10;        event.preventDefault();&#10;&#10;        // Limpar alertas anteriores&#10;        errorAlert.style.display = 'none';&#10;        successAlert.style.display = 'none';&#10;&#10;        // Coletar dados do formulário&#10;        const email = document.getElementById('email').value;&#10;        const password = passwordField.value;&#10;&#10;        // Validar senha mínima de 6 dígitos&#10;        if (password.length &lt; 6) {&#10;            errorAlert.textContent = 'A senha deve ter no mínimo 6 dígitos.';&#10;            errorAlert.style.display = 'block';&#10;            return;&#10;        }&#10;&#10;        // Fazer login via API&#10;        const loginData = {&#10;            email: email,&#10;            password: password&#10;        };&#10;&#10;        fetch('/api/login', {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json'&#10;            },&#10;            body: JSON.stringify(loginData)&#10;        })&#10;        .then(response =&gt; {&#10;            if (response.ok) {&#10;                return response.json();&#10;            } else {&#10;                return response.text().then(text =&gt; {&#10;                    throw new Error(text || 'Email ou senha inválidos.');&#10;                });&#10;            }&#10;        })&#10;        .then(data =&gt; {&#10;            successAlert.textContent = 'Login realizado com sucesso! Redirecionando...';&#10;            successAlert.style.display = 'block';&#10;&#10;            // Armazenar dados do usuário no localStorage&#10;            localStorage.setItem('userData', JSON.stringify(data));&#10;            localStorage.setItem('userEmail', email);&#10;&#10;            // Redirecionar para o dashboard após 1.5 segundos&#10;            setTimeout(() =&gt; {&#10;                window.location.href = 'dashboard.html';&#10;            }, 1500);&#10;        })&#10;        .catch(error =&gt; {&#10;            errorAlert.textContent = error.message;&#10;            errorAlert.style.display = 'block';&#10;        });&#10;    });&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/static/login.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/static/login.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;pt-br&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Login - Banco ADA&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css&quot;&gt;&#10;    &lt;style&gt;&#10;        body {&#10;            background: linear-gradient(135deg, #0033a0 0%, #0066cc 100%);&#10;            padding-top: 50px;&#10;            color: white;&#10;            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;&#10;            height: 100vh;&#10;            margin: 0;&#10;            padding: 0;&#10;        }&#10;        .background-pattern {&#10;            position: fixed;&#10;            top: 0;&#10;            left: 0;&#10;            width: 100%;&#10;            height: 100%;&#10;            background-image: url('data:image/svg+xml;utf8,&lt;svg width=&quot;100&quot; height=&quot;100&quot; viewBox=&quot;0 0 100 100&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path fill=&quot;%230055b3&quot; fill-opacity=&quot;0.1&quot; d=&quot;M50 0 L100 50 L50 100 L0 50 Z&quot; /&gt;&lt;/svg&gt;');&#10;            background-size: 200px 200px;&#10;            z-index: -1;&#10;        }&#10;        .header {&#10;            padding: 20px 0;&#10;            margin-bottom: 20px;&#10;            text-align: center;&#10;        }&#10;        .logo {&#10;            font-size: 40px;&#10;            font-weight: bold;&#10;            color: white;&#10;            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);&#10;            margin-bottom: 10px;&#10;        }&#10;        .container {&#10;            max-width: 500px;&#10;            margin: 30px auto;&#10;            background-color: rgba(255, 255, 255, 0.95);&#10;            padding: 30px;&#10;            border-radius: 15px;&#10;            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);&#10;            color: #333;&#10;        }&#10;        .form-group {&#10;            margin-bottom: 25px;&#10;        }&#10;        .form-label {&#10;            font-weight: 600;&#10;            margin-bottom: 8px;&#10;            color: #0033a0;&#10;        }&#10;        .form-control {&#10;            border: 1px solid #ced4da;&#10;            padding: 12px;&#10;            border-radius: 8px;&#10;            transition: all 0.3s;&#10;        }&#10;        .form-control:focus {&#10;            border-color: #0033a0;&#10;            box-shadow: 0 0 0 0.25rem rgba(0, 51, 160, 0.25);&#10;        }&#10;        .btn-primary {&#10;            background-color: #0033a0;&#10;            border-color: #0033a0;&#10;            padding: 12px 25px;&#10;            font-weight: 600;&#10;            transition: all 0.3s;&#10;        }&#10;        .btn-primary:hover {&#10;            background-color: #00288f;&#10;            transform: translateY(-3px);&#10;            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);&#10;        }&#10;        .btn-secondary {&#10;            background-color: #6c757d;&#10;            border-color: #6c757d;&#10;            padding: 12px 25px;&#10;            font-weight: 600;&#10;            transition: all 0.3s;&#10;        }&#10;        .btn-secondary:hover {&#10;            background-color: #5a6268;&#10;            transform: translateY(-3px);&#10;            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);&#10;        }&#10;        .alert {&#10;            display: none;&#10;            margin-top: 20px;&#10;            padding: 15px;&#10;            border-radius: 8px;&#10;        }&#10;        .footer {&#10;            text-align: center;&#10;            margin-top: 30px;&#10;            color: rgba(255, 255, 255, 0.7);&#10;            font-size: 14px;&#10;        }&#10;        .card-img {&#10;            position: absolute;&#10;            top: 20px;&#10;            right: 20px;&#10;            width: 60px;&#10;            opacity: 0.8;&#10;        }&#10;        .secure-badge {&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            margin-top: 20px;&#10;            color: #6c757d;&#10;            font-size: 14px;&#10;        }&#10;        .secure-badge i {&#10;            margin-right: 8px;&#10;            color: #28a745;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;background-pattern&quot;&gt;&lt;/div&gt;&#10;&#10;    &lt;div class=&quot;header&quot;&gt;&#10;        &lt;a href=&quot;index.html&quot; class=&quot;text-decoration-none&quot;&gt;&#10;            &lt;div class=&quot;logo&quot;&gt;&#10;                &lt;i class=&quot;fas fa-landmark me-2&quot;&gt;&lt;/i&gt; Banco ADA&#10;            &lt;/div&gt;&#10;        &lt;/a&gt;&#10;        &lt;p&gt;Acesse sua conta bancária&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;container position-relative&quot;&gt;&#10;        &lt;i class=&quot;fas fa-credit-card card-img&quot;&gt;&lt;/i&gt;&#10;        &lt;h2 class=&quot;text-center mb-4&quot;&gt;Login&lt;/h2&gt;&#10;&#10;        &lt;form id=&quot;loginForm&quot;&gt;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;email&quot; class=&quot;form-label&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-envelope me-2&quot;&gt;&lt;/i&gt;Email&#10;                &lt;/label&gt;&#10;                &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;email&quot; placeholder=&quot;Seu email&quot; required&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;senha&quot; class=&quot;form-label&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-lock me-2&quot;&gt;&lt;/i&gt;Senha&#10;                &lt;/label&gt;&#10;                &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;senha&quot; placeholder=&quot;Sua senha&quot; required minlength=&quot;6&quot;&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;text-center&quot;&gt;&#10;                &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-sign-in-alt me-2&quot;&gt;&lt;/i&gt;Entrar&#10;                &lt;/button&gt;&#10;                &lt;a href=&quot;index.html&quot; class=&quot;btn btn-secondary ms-2&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-arrow-left me-2&quot;&gt;&lt;/i&gt;Voltar&#10;                &lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/form&gt;&#10;&#10;        &lt;div class=&quot;alert alert-danger mt-3&quot; id=&quot;errorAlert&quot;&gt;&lt;/div&gt;&#10;        &lt;div class=&quot;alert alert-success mt-3&quot; id=&quot;successAlert&quot;&gt;&lt;/div&gt;&#10;&#10;        &lt;div class=&quot;secure-badge&quot;&gt;&#10;            &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt; Conexão segura - Seus dados estão protegidos&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;footer&quot;&gt;&#10;        &lt;p&gt;&amp;copy; 2025 Banco ADA - Todos os direitos reservados&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;js/login.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;pt-br&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Login - Banco ADA&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css&quot;&gt;&#10;    &lt;style&gt;&#10;        body {&#10;            background: linear-gradient(135deg, #0033a0 0%, #0066cc 100%);&#10;            color: white;&#10;            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;&#10;            min-height: 100vh;&#10;            margin: 0;&#10;            padding: 20px 0;&#10;        }&#10;        .background-pattern {&#10;            position: fixed;&#10;            top: 0;&#10;            left: 0;&#10;            width: 100%;&#10;            height: 100%;&#10;            background-image: url('data:image/svg+xml;utf8,&lt;svg width=&quot;100&quot; height=&quot;100&quot; viewBox=&quot;0 0 100 100&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path fill=&quot;%230055b3&quot; fill-opacity=&quot;0.1&quot; d=&quot;M50 0 L100 50 L50 100 L0 50 Z&quot; /&gt;&lt;/svg&gt;');&#10;            background-size: 200px 200px;&#10;            z-index: -1;&#10;        }&#10;        .header {&#10;            padding: 20px 0;&#10;            margin-bottom: 20px;&#10;            text-align: center;&#10;        }&#10;        .logo {&#10;            font-size: 40px;&#10;            font-weight: bold;&#10;            color: white;&#10;            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);&#10;            margin-bottom: 10px;&#10;        }&#10;        .container {&#10;            max-width: 500px;&#10;            margin: 30px auto;&#10;            background-color: rgba(255, 255, 255, 0.95);&#10;            padding: 40px;&#10;            border-radius: 15px;&#10;            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);&#10;            color: #333;&#10;        }&#10;        .form-group {&#10;            margin-bottom: 25px;&#10;        }&#10;        .form-label {&#10;            font-weight: 600;&#10;            margin-bottom: 8px;&#10;            color: #0033a0;&#10;        }&#10;        .form-control {&#10;            border: 1px solid #ced4da;&#10;            padding: 15px;&#10;            border-radius: 8px;&#10;            transition: all 0.3s;&#10;            font-size: 16px;&#10;        }&#10;        .form-control:focus {&#10;            border-color: #0033a0;&#10;            box-shadow: 0 0 0 0.25rem rgba(0, 51, 160, 0.25);&#10;        }&#10;        .btn-primary {&#10;            background-color: #0033a0;&#10;            border-color: #0033a0;&#10;            padding: 15px 30px;&#10;            font-weight: 600;&#10;            font-size: 16px;&#10;            width: 100%;&#10;            transition: all 0.3s;&#10;        }&#10;        .btn-primary:hover {&#10;            background-color: #00288f;&#10;            transform: translateY(-2px);&#10;            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);&#10;        }&#10;        .btn-secondary {&#10;            background-color: #6c757d;&#10;            border-color: #6c757d;&#10;            padding: 12px 25px;&#10;            font-weight: 600;&#10;            transition: all 0.3s;&#10;        }&#10;        .btn-secondary:hover {&#10;            background-color: #5a6268;&#10;            transform: translateY(-2px);&#10;            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);&#10;        }&#10;        .alert {&#10;            display: none;&#10;            margin-top: 20px;&#10;            padding: 15px;&#10;            border-radius: 8px;&#10;        }&#10;        .login-icon {&#10;            text-align: center;&#10;            margin-bottom: 30px;&#10;        }&#10;        .login-icon i {&#10;            font-size: 60px;&#10;            color: #0033a0;&#10;            margin-bottom: 15px;&#10;        }&#10;        .footer {&#10;            text-align: center;&#10;            margin-top: 30px;&#10;            color: rgba(255, 255, 255, 0.7);&#10;            font-size: 14px;&#10;        }&#10;        .links-container {&#10;            text-align: center;&#10;            margin-top: 20px;&#10;        }&#10;        .links-container a {&#10;            color: #0033a0;&#10;            text-decoration: none;&#10;            margin: 0 10px;&#10;        }&#10;        .links-container a:hover {&#10;            text-decoration: underline;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;background-pattern&quot;&gt;&lt;/div&gt;&#10;&#10;    &lt;div class=&quot;header&quot;&gt;&#10;        &lt;a href=&quot;index.html&quot; class=&quot;text-decoration-none&quot;&gt;&#10;            &lt;div class=&quot;logo&quot;&gt;&#10;                &lt;i class=&quot;fas fa-landmark me-2&quot;&gt;&lt;/i&gt; Banco ADA&#10;            &lt;/div&gt;&#10;        &lt;/a&gt;&#10;        &lt;p&gt;Acesse sua conta bancária com segurança&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;container&quot;&gt;&#10;        &lt;div class=&quot;login-icon&quot;&gt;&#10;            &lt;i class=&quot;fas fa-user-lock&quot;&gt;&lt;/i&gt;&#10;            &lt;h2&gt;Login&lt;/h2&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form id=&quot;loginForm&quot;&gt;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;email&quot; class=&quot;form-label&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-envelope me-2&quot;&gt;&lt;/i&gt;Email&#10;                &lt;/label&gt;&#10;                &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;email&quot; name=&quot;email&quot; required&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;password&quot; class=&quot;form-label&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-lock me-2&quot;&gt;&lt;/i&gt;Senha (mínimo 6 dígitos)&#10;                &lt;/label&gt;&#10;                &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;password&quot; name=&quot;password&quot; required minlength=&quot;6&quot;&gt;&#10;                &lt;div class=&quot;invalid-feedback&quot;&gt;&#10;                    A senha deve ter pelo menos 6 dígitos.&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;&#10;                &lt;i class=&quot;fas fa-sign-in-alt me-2&quot;&gt;&lt;/i&gt;Entrar&#10;            &lt;/button&gt;&#10;        &lt;/form&gt;&#10;&#10;        &lt;div class=&quot;alert alert-danger&quot; id=&quot;errorAlert&quot;&gt;&lt;/div&gt;&#10;        &lt;div class=&quot;alert alert-success&quot; id=&quot;successAlert&quot;&gt;&lt;/div&gt;&#10;&#10;        &lt;div class=&quot;links-container&quot;&gt;&#10;            &lt;a href=&quot;cadastro.html&quot;&gt;&#10;                &lt;i class=&quot;fas fa-user-plus me-1&quot;&gt;&lt;/i&gt;Criar conta&#10;            &lt;/a&gt;&#10;            |&#10;            &lt;a href=&quot;index.html&quot;&gt;&#10;                &lt;i class=&quot;fas fa-arrow-left me-1&quot;&gt;&lt;/i&gt;Voltar&#10;            &lt;/a&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;footer&quot;&gt;&#10;        &lt;p&gt;&amp;copy; 2025 Banco ADA - Todos os direitos reservados&lt;/p&gt;&#10;        &lt;p&gt;&lt;i class=&quot;fas fa-shield-alt me-1&quot;&gt;&lt;/i&gt;Conexão segura e criptografada&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;js/login.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>